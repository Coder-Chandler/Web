22:11:42 完整请求
22:11:42 请求结束
22:11:42 cookie ['user=hgkllhdde8h8skdc']
22:11:42 path and query /weibo/index {} 
22:11:42 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:11:42 完整请求
22:11:42 完整请求
22:11:42 请求结束
22:11:42 请求结束
22:11:42 cookie ['user=hgkllhdde8h8skdc']
22:11:42 path and query /static {'file': 'gua.js'} 
22:11:42 cookie ['user=hgkllhdde8h8skdc']
22:11:42 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:11:42 path and query /static {'file': 'weibo.js'} 
22:11:42 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                ${ut}
            </div>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:11:42 完整请求
22:11:42 请求结束
22:11:42 cookie ['user=hgkllhdde8h8skdc']
22:11:42 path and query /api/weibo/all {} 
22:11:42 kwargs,  {'weibo_id': 1} <class 'dict'>
22:11:42 kwargs,  {'weibo_id': 2} <class 'dict'>
22:11:42 kwargs,  {'weibo_id': 3} <class 'dict'>
22:11:42 kwargs,  {'weibo_id': 4} <class 'dict'>
22:11:42 kwargs,  {'weibo_id': 5} <class 'dict'>
22:11:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "asdasd",
    "ct": 1512915102,
    "ut": 1512915102,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "asdasdzxzxc",
    "ct": 1512915102,
    "ut": 1512915102,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "cdcdc",
    "ct": 1512915102,
    "ut": 1512915102,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asdasda",
    "ct": 1512915102,
    "ut": 1512915102,
    "comments": []
  },
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915102,
    "ut": 1512915102,
    "comments": []
  }
]
22:11:45 完整请求
22:11:45 请求结束
22:11:45 cookie ['user=hgkllhdde8h8skdc']
22:11:45 path and query /weibo/index {} 
22:11:45 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:11:46 完整请求
22:11:46 完整请求
22:11:46 请求结束
22:11:46 请求结束
22:11:46 cookie ['user=hgkllhdde8h8skdc']
22:11:46 cookie ['user=hgkllhdde8h8skdc']
22:11:46 path and query /static {'file': 'weibo.js'} 
22:11:46 path and query /static {'file': 'gua.js'} 
22:11:46 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                ${ut}
            </div>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:11:46 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:11:46 完整请求
22:11:46 请求结束
22:11:46 cookie ['user=hgkllhdde8h8skdc']
22:11:46 path and query /api/weibo/all {} 
22:11:46 kwargs,  {'weibo_id': 1} <class 'dict'>
22:11:46 kwargs,  {'weibo_id': 2} <class 'dict'>
22:11:46 kwargs,  {'weibo_id': 3} <class 'dict'>
22:11:46 kwargs,  {'weibo_id': 4} <class 'dict'>
22:11:46 kwargs,  {'weibo_id': 5} <class 'dict'>
22:11:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "asdasd",
    "ct": 1512915106,
    "ut": 1512915106,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "asdasdzxzxc",
    "ct": 1512915106,
    "ut": 1512915106,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "cdcdc",
    "ct": 1512915106,
    "ut": 1512915106,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asdasda",
    "ct": 1512915106,
    "ut": 1512915106,
    "comments": []
  },
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915106,
    "ut": 1512915106,
    "comments": []
  }
]
22:11:51 完整请求
22:11:51 请求结束
22:11:51 cookie ['user=hgkllhdde8h8skdc']
22:11:51 path and query /api/weibo/update {} 
22:11:55 完整请求
22:11:55 请求结束
22:11:55 cookie ['user=hgkllhdde8h8skdc']
22:11:55 path and query /api/weibo/update {} {"id":"1","content":"wwqw212"}
22:11:55 kwargs,  {'id': 1} <class 'dict'>
22:11:55 debug 0
22:11:55 kwargs,  {'weibo_id': 1} <class 'dict'>
22:11:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "asdasd",
  "ct": 1512915115,
  "ut": 1512915115,
  "comments": [
    {
      "id": 1,
      "content": "楼主说得对",
      "weibo_id": 1,
      "user_id": 2
    },
    {
      "id": 2,
      "content": "lbvu is right",
      "weibo_id": 1,
      "user_id": 1
    }
  ]
}
22:11:59 完整请求
22:11:59 请求结束
22:11:59 cookie ['user=hgkllhdde8h8skdc']
22:11:59 path and query /api/weibo/update {} 
22:12:00 完整请求
22:12:00 请求结束
22:12:00 cookie ['user=hgkllhdde8h8skdc']
22:12:00 path and query /weibo/index {} 
22:12:00 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:12:00 完整请求
22:12:00 完整请求
22:12:00 请求结束
22:12:00 cookie ['user=hgkllhdde8h8skdc']
22:12:00 请求结束
22:12:00 path and query /static {'file': 'gua.js'} 
22:12:00 cookie ['user=hgkllhdde8h8skdc']
22:12:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:12:00 path and query /static {'file': 'weibo.js'} 
22:12:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                ${ut}
            </div>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:12:00 完整请求
22:12:00 请求结束
22:12:00 cookie ['user=hgkllhdde8h8skdc']
22:12:00 path and query /api/weibo/all {} 
22:12:00 kwargs,  {'weibo_id': 1} <class 'dict'>
22:12:00 kwargs,  {'weibo_id': 2} <class 'dict'>
22:12:00 kwargs,  {'weibo_id': 3} <class 'dict'>
22:12:00 kwargs,  {'weibo_id': 4} <class 'dict'>
22:12:00 kwargs,  {'weibo_id': 5} <class 'dict'>
22:12:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "asdasd",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "asdasdzxzxc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "cdcdc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asdasda",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  },
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  }
]
22:12:05 完整请求
22:12:05 请求结束
22:12:05 cookie ['user=hgkllhdde8h8skdc']
22:12:05 path and query /api/weibo/update {} {"id":"1","content":"sad"}
22:12:05 kwargs,  {'id': 1} <class 'dict'>
22:12:05 debug 0
22:12:05 kwargs,  {'weibo_id': 1} <class 'dict'>
22:12:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "asdasd",
  "ct": 1512915115,
  "ut": 1512915125,
  "comments": [
    {
      "id": 1,
      "content": "楼主说得对",
      "weibo_id": 1,
      "user_id": 2
    },
    {
      "id": 2,
      "content": "lbvu is right",
      "weibo_id": 1,
      "user_id": 1
    }
  ]
}
22:19:57 完整请求
22:19:57 请求结束
22:19:57 cookie ['user=hgkllhdde8h8skdc']
22:19:57 path and query /weibo/index {} 
22:19:57 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:19:57 完整请求
22:19:57 完整请求
22:19:57 请求结束
22:19:57 请求结束
22:19:57 cookie ['user=hgkllhdde8h8skdc']
22:19:57 cookie ['user=hgkllhdde8h8skdc']
22:19:57 path and query /static {'file': 'weibo.js'} 
22:19:57 path and query /static {'file': 'gua.js'} 
22:19:57 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                ${ut}
            </div>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-update')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:19:57 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:19:57 完整请求
22:19:57 请求结束
22:19:57 cookie ['user=hgkllhdde8h8skdc']
22:19:57 path and query /api/weibo/all {} 
22:19:57 kwargs,  {'weibo_id': 1} <class 'dict'>
22:19:57 kwargs,  {'weibo_id': 2} <class 'dict'>
22:19:57 kwargs,  {'weibo_id': 3} <class 'dict'>
22:19:57 kwargs,  {'weibo_id': 4} <class 'dict'>
22:19:57 kwargs,  {'weibo_id': 5} <class 'dict'>
22:19:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "asdasd",
    "ct": 1512915115,
    "ut": 1512915125,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "asdasdzxzxc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "cdcdc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asdasda",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  },
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  }
]
22:20:03 完整请求
22:20:03 请求结束
22:20:03 cookie ['user=hgkllhdde8h8skdc']
22:20:03 path and query /api/weibo/update {} {"content":"sdasd"}
22:20:10 完整请求
22:20:10 请求结束
22:20:10 cookie ['user=hgkllhdde8h8skdc']
22:20:10 path and query /api/weibo/update {} {"content":"dcssdsvcscas"}
22:23:46 完整请求
22:23:46 请求结束
22:23:46 cookie ['user=hgkllhdde8h8skdc']
22:23:46 path and query /weibo/index {} 
22:23:46 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:23:46 完整请求
22:23:46 完整请求
22:23:46 请求结束
22:23:46 cookie ['user=hgkllhdde8h8skdc']
22:23:46 请求结束
22:23:46 path and query /static {'file': 'weibo.js'} 
22:23:46 cookie ['user=hgkllhdde8h8skdc']
22:23:46 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                ${ut}
            </div>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:23:46 path and query /static {'file': 'gua.js'} 
22:23:46 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:23:47 完整请求
22:23:47 请求结束
22:23:47 cookie ['user=hgkllhdde8h8skdc']
22:23:47 path and query /api/weibo/all {} 
22:23:47 kwargs,  {'weibo_id': 1} <class 'dict'>
22:23:47 kwargs,  {'weibo_id': 2} <class 'dict'>
22:23:47 kwargs,  {'weibo_id': 3} <class 'dict'>
22:23:47 kwargs,  {'weibo_id': 4} <class 'dict'>
22:23:47 kwargs,  {'weibo_id': 5} <class 'dict'>
22:23:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "asdasd",
    "ct": 1512915115,
    "ut": 1512915125,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "asdasdzxzxc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "cdcdc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asdasda",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  },
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  }
]
22:23:53 完整请求
22:23:53 请求结束
22:23:53 cookie ['user=hgkllhdde8h8skdc']
22:23:53 path and query /api/weibo/update {} 
22:24:28 完整请求
22:24:28 请求结束
22:24:28 cookie ['user=hgkllhdde8h8skdc']
22:24:28 path and query /weibo/index {} 
22:24:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:24:28 完整请求
22:24:28 完整请求
22:24:28 请求结束
22:24:28 请求结束
22:24:28 cookie ['user=hgkllhdde8h8skdc']
22:24:28 cookie ['user=hgkllhdde8h8skdc']
22:24:28 path and query /static {'file': 'gua.js'} 
22:24:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:24:28 path and query /static {'file': 'weibo.js'} 
22:24:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                ${ut}
            </div>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:24:29 完整请求
22:24:29 请求结束
22:24:29 cookie ['user=hgkllhdde8h8skdc']
22:24:29 path and query /api/weibo/all {} 
22:24:29 kwargs,  {'weibo_id': 1} <class 'dict'>
22:24:29 kwargs,  {'weibo_id': 2} <class 'dict'>
22:24:29 kwargs,  {'weibo_id': 3} <class 'dict'>
22:24:29 kwargs,  {'weibo_id': 4} <class 'dict'>
22:24:29 kwargs,  {'weibo_id': 5} <class 'dict'>
22:24:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "asdasd",
    "ct": 1512915115,
    "ut": 1512915125,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "asdasdzxzxc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "cdcdc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asdasda",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  },
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  }
]
22:24:32 完整请求
22:24:32 请求结束
22:24:32 cookie ['user=hgkllhdde8h8skdc']
22:24:32 path and query /api/weibo/update {} 
22:24:35 完整请求
22:24:35 请求结束
22:24:35 cookie ['user=hgkllhdde8h8skdc']
22:24:35 path and query /api/weibo/update {} {"id":"1","content":"asdadsada"}
22:24:35 kwargs,  {'id': 1} <class 'dict'>
22:24:35 debug 0
22:24:35 kwargs,  {'weibo_id': 1} <class 'dict'>
22:24:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "asdasd",
  "ct": 1512915115,
  "ut": 1512915875,
  "comments": [
    {
      "id": 1,
      "content": "楼主说得对",
      "weibo_id": 1,
      "user_id": 2
    },
    {
      "id": 2,
      "content": "lbvu is right",
      "weibo_id": 1,
      "user_id": 1
    }
  ]
}
22:25:01 完整请求
22:25:01 请求结束
22:25:01 cookie ['user=hgkllhdde8h8skdc']
22:25:01 path and query /weibo/index {} 
22:25:01 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:25:01 完整请求
22:25:01 完整请求
22:25:01 请求结束
22:25:01 请求结束
22:25:01 cookie ['user=hgkllhdde8h8skdc']
22:25:01 cookie ['user=hgkllhdde8h8skdc']
22:25:01 path and query /static {'file': 'gua.js'} 
22:25:01 path and query /static {'file': 'weibo.js'} 
22:25:01 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:25:01 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                ${ut}
            </div>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:25:01 完整请求
22:25:01 请求结束
22:25:01 cookie ['user=hgkllhdde8h8skdc']
22:25:01 path and query /api/weibo/all {} 
22:25:01 kwargs,  {'weibo_id': 1} <class 'dict'>
22:25:01 kwargs,  {'weibo_id': 2} <class 'dict'>
22:25:01 kwargs,  {'weibo_id': 3} <class 'dict'>
22:25:01 kwargs,  {'weibo_id': 4} <class 'dict'>
22:25:01 kwargs,  {'weibo_id': 5} <class 'dict'>
22:25:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "asdasd",
    "ct": 1512915115,
    "ut": 1512915875,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "asdasdzxzxc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "cdcdc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asdasda",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  },
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  }
]
22:25:06 完整请求
22:25:06 请求结束
22:25:06 cookie ['user=hgkllhdde8h8skdc']
22:25:06 path and query /api/weibo/update {} 
22:25:48 完整请求
22:25:48 请求结束
22:25:48 cookie ['user=hgkllhdde8h8skdc']
22:25:48 path and query /api/weibo/update {} {"id":"1","content":"asdasdasdsdasdsad"}
22:25:48 kwargs,  {'id': 1} <class 'dict'>
22:25:48 debug 0
22:25:48 kwargs,  {'weibo_id': 1} <class 'dict'>
22:25:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "asdasd",
  "ct": 1512915115,
  "ut": 1512915948,
  "comments": [
    {
      "id": 1,
      "content": "楼主说得对",
      "weibo_id": 1,
      "user_id": 2
    },
    {
      "id": 2,
      "content": "lbvu is right",
      "weibo_id": 1,
      "user_id": 1
    }
  ]
}
22:27:00 完整请求
22:27:00 请求结束
22:27:00 cookie ['user=hgkllhdde8h8skdc']
22:27:00 path and query /weibo/index {} 
22:27:00 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:27:00 完整请求
22:27:00 请求结束
22:27:00 cookie ['user=hgkllhdde8h8skdc']
22:27:00 path and query /static {'file': 'gua.js'} 
22:27:00 完整请求
22:27:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:27:00 请求结束
22:27:00 cookie ['user=hgkllhdde8h8skdc']
22:27:00 path and query /static {'file': 'weibo.js'} 
22:27:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                ${ut}
            </div>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:27:00 完整请求
22:27:00 请求结束
22:27:00 cookie ['user=hgkllhdde8h8skdc']
22:27:00 path and query /api/weibo/all {} 
22:27:00 kwargs,  {'weibo_id': 1} <class 'dict'>
22:27:00 kwargs,  {'weibo_id': 2} <class 'dict'>
22:27:00 kwargs,  {'weibo_id': 3} <class 'dict'>
22:27:00 kwargs,  {'weibo_id': 4} <class 'dict'>
22:27:00 kwargs,  {'weibo_id': 5} <class 'dict'>
22:27:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "asdasd",
    "ct": 1512915115,
    "ut": 1512915948,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "asdasdzxzxc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "cdcdc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asdasda",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  },
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  }
]
22:27:05 完整请求
22:27:05 请求结束
22:27:05 cookie ['user=hgkllhdde8h8skdc']
22:27:05 path and query /api/weibo/update {} {"id":"1","content":"213123123123"}
22:27:05 kwargs,  {'id': 1} <class 'dict'>
22:27:05 debug 0
22:27:05 kwargs,  {'weibo_id': 1} <class 'dict'>
22:27:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "asdasd",
  "ct": 1512915115,
  "ut": 1512916025,
  "comments": [
    {
      "id": 1,
      "content": "楼主说得对",
      "weibo_id": 1,
      "user_id": 2
    },
    {
      "id": 2,
      "content": "lbvu is right",
      "weibo_id": 1,
      "user_id": 1
    }
  ]
}
22:27:44 完整请求
22:27:44 请求结束
22:27:44 cookie ['user=hgkllhdde8h8skdc']
22:27:44 path and query /weibo/index {} 
22:27:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:27:44 完整请求
22:27:44 完整请求
22:27:44 请求结束
22:27:44 请求结束
22:27:44 cookie ['user=hgkllhdde8h8skdc']
22:27:44 cookie ['user=hgkllhdde8h8skdc']
22:27:44 path and query /static {'file': 'weibo.js'} 
22:27:44 path and query /static {'file': 'gua.js'} 
22:27:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                ${ut}
            </div>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:27:44 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:27:44 完整请求
22:27:44 请求结束
22:27:44 cookie ['user=hgkllhdde8h8skdc']
22:27:44 path and query /api/weibo/all {} 
22:27:44 kwargs,  {'weibo_id': 1} <class 'dict'>
22:27:44 kwargs,  {'weibo_id': 2} <class 'dict'>
22:27:44 kwargs,  {'weibo_id': 3} <class 'dict'>
22:27:44 kwargs,  {'weibo_id': 4} <class 'dict'>
22:27:44 kwargs,  {'weibo_id': 5} <class 'dict'>
22:27:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "asdasd",
    "ct": 1512915115,
    "ut": 1512916025,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "asdasdzxzxc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "cdcdc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asdasda",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  },
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  }
]
22:27:47 完整请求
22:27:47 请求结束
22:27:47 cookie ['user=hgkllhdde8h8skdc']
22:27:47 path and query /api/weibo/update {} {"id":"1","content":"we12321321321"}
22:27:47 kwargs,  {'id': 1} <class 'dict'>
22:27:47 debug 0
22:27:47 kwargs,  {'weibo_id': 1} <class 'dict'>
22:27:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "asdasd",
  "ct": 1512915115,
  "ut": 1512916067,
  "comments": [
    {
      "id": 1,
      "content": "楼主说得对",
      "weibo_id": 1,
      "user_id": 2
    },
    {
      "id": 2,
      "content": "lbvu is right",
      "weibo_id": 1,
      "user_id": 1
    }
  ]
}
22:36:54 完整请求
22:36:54 请求结束
22:36:54 cookie ['user=hgkllhdde8h8skdc']
22:36:54 path and query /weibo/index {} 
22:36:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:36:54 完整请求
22:36:54 请求结束
22:36:54 cookie ['user=hgkllhdde8h8skdc']
22:36:54 path and query /static {'file': 'gua.js'} 
22:36:54 完整请求
22:36:54 请求结束
22:36:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:36:54 cookie ['user=hgkllhdde8h8skdc']
22:36:54 path and query /static {'file': 'weibo.js'} 
22:36:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                ${ut}
            </div>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:36:54 完整请求
22:36:54 请求结束
22:36:54 cookie ['user=hgkllhdde8h8skdc']
22:36:54 path and query /api/weibo/all {} 
22:36:54 kwargs,  {'weibo_id': 1} <class 'dict'>
22:36:54 kwargs,  {'weibo_id': 2} <class 'dict'>
22:36:54 kwargs,  {'weibo_id': 3} <class 'dict'>
22:36:54 kwargs,  {'weibo_id': 4} <class 'dict'>
22:36:54 kwargs,  {'weibo_id': 5} <class 'dict'>
22:36:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "asdasd",
    "ct": 1512915115,
    "ut": 1512916067,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "asdasdzxzxc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "cdcdc",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "asdasda",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  },
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  }
]
22:36:58 完整请求
22:36:58 请求结束
22:36:58 cookie ['user=hgkllhdde8h8skdc']
22:36:58 path and query /api/weibo/update {} 
22:41:17 完整请求
22:41:17 请求结束
22:41:17 cookie ['user=hgkllhdde8h8skdc']
22:41:17 path and query /weibo/index {} 
22:41:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:41:17 完整请求
22:41:17 请求结束
22:41:17 完整请求
22:41:17 cookie ['user=hgkllhdde8h8skdc']
22:41:17 请求结束
22:41:17 cookie ['user=hgkllhdde8h8skdc']
22:41:17 path and query /static {'file': 'gua.js'} 
22:41:17 path and query /static {'file': 'weibo.js'} 
22:41:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:41:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                ${ut}
            </div>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:41:17 完整请求
22:41:17 请求结束
22:41:17 cookie ['user=hgkllhdde8h8skdc']
22:41:17 path and query /api/weibo/all {} 
22:41:17 kwargs,  {'weibo_id': 5} <class 'dict'>
22:41:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512915115,
    "comments": []
  }
]
22:41:25 完整请求
22:41:25 请求结束
22:41:25 cookie ['user=hgkllhdde8h8skdc']
22:41:25 path and query /api/weibo/update {} {"id":"5","content":"221232132132"}
22:41:25 kwargs,  {'id': 5} <class 'dict'>
22:41:25 debug 0
22:41:25 kwargs,  {'weibo_id': 5} <class 'dict'>
22:41:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512916885,
  "comments": []
}
22:53:30 完整请求
22:53:30 请求结束
22:53:30 cookie ['user=hgkllhdde8h8skdc']
22:53:30 path and query /todo/index {} 
22:53:30 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
22:53:30 完整请求
22:53:30 请求结束
22:53:30 cookie ['user=hgkllhdde8h8skdc']
22:53:30 path and query /static {'file': 'gua.js'} 
22:53:30 完整请求
22:53:30 请求结束
22:53:30 cookie ['user=hgkllhdde8h8skdc']
22:53:30 path and query /static {'file': 'todo.js'} 
22:53:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:53:30 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    log('todo', todo)
    //
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    //通过函数 e 抓取到 <button id='id-button-add'>add</button> 中的 id-button-add
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        ////通过函数 e 抓取到 <input id='id-input-todo'> 中的 id-input-todo
        var input = e('#id-input-todo')
        //拿到input框中用户输入的数据字段
        var title = input.value
        //打印出用户输入的数据字段
        log('click add', title)
        //设置form表单
        var form = {
            'title': title,
        }
        //调用 apiTodoAdd 函数异步加载数据
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            //调用 insertTodo 函数插入todo数据
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    //增加一条todo
    bindEventTodoAdd()
    //删除一条todo
    bindEventTodoDelete()
    //编辑一条tudo
    bindEventTodoEdit()
    //更新一条todo
    bindEventTodoUpdate()
}

var __main = function() {
    //绑定事件的函数
    bindEvents()
    //加载todo数据的函数
    loadTodos()
}

//函数主入口
__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:53:30 完整请求
22:53:30 请求结束
22:53:30 cookie ['user=hgkllhdde8h8skdc']
22:53:30 path and query /api/todo/all {} 
22:53:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "title": "",
    "completed": false,
    "ct": 1512837151,
    "ut": 1512887899
  },
  {
    "id": 6,
    "title": "asd",
    "completed": false,
    "ct": 1512837305,
    "ut": 1512837305
  }
]
22:54:06 完整请求
22:54:06 完整请求
22:54:06 请求结束
22:54:06 请求结束
22:54:06 完整请求
22:54:06 请求结束
22:54:06 cookie ['user=hgkllhdde8h8skdc']
22:54:06 path and query /todo/index {} 
22:54:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
22:54:06 完整请求
22:54:06 完整请求
22:54:06 请求结束
22:54:06 请求结束
22:54:06 cookie ['user=hgkllhdde8h8skdc']
22:54:06 cookie ['user=hgkllhdde8h8skdc']
22:54:06 path and query /static {'file': 'todo.js'} 
22:54:06 path and query /static {'file': 'gua.js'} 
22:54:06 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    log('todo', todo)
    //
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    //通过函数 e 抓取到 <button id='id-button-add'>add</button> 中的 id-button-add
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        ////通过函数 e 抓取到 <input id='id-input-todo'> 中的 id-input-todo
        var input = e('#id-input-todo')
        //拿到input框中用户输入的数据字段
        var title = input.value
        //打印出用户输入的数据字段
        log('click add', title)
        //设置form表单
        var form = {
            'title': title,
        }
        //调用 apiTodoAdd 函数异步加载数据
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            //调用 insertTodo 函数插入todo数据
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            log('form', form)
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                log('selector', selector)
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    //增加一条todo
    bindEventTodoAdd()
    //删除一条todo
    bindEventTodoDelete()
    //编辑一条tudo
    bindEventTodoEdit()
    //更新一条todo
    bindEventTodoUpdate()
}

var __main = function() {
    //绑定事件的函数
    bindEvents()
    //加载todo数据的函数
    loadTodos()
}

//函数主入口
__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:54:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:54:06 完整请求
22:54:06 请求结束
22:54:06 cookie ['user=hgkllhdde8h8skdc']
22:54:06 path and query /api/todo/all {} 
22:54:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "title": "",
    "completed": false,
    "ct": 1512837151,
    "ut": 1512887899
  },
  {
    "id": 6,
    "title": "asd",
    "completed": false,
    "ct": 1512837305,
    "ut": 1512837305
  }
]
22:54:09 完整请求
22:54:09 请求结束
22:54:09 cookie ['user=hgkllhdde8h8skdc']
22:54:09 path and query /api/todo/update {} 
22:54:12 完整请求
22:54:12 请求结束
22:54:12 cookie ['user=hgkllhdde8h8skdc']
22:54:12 path and query /api/todo/update {} {"id":"5","title":"dasd"}
22:54:12 kwargs,  {'id': 5} <class 'dict'>
22:54:12 debug 0
22:54:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "title": "dasd",
  "completed": false,
  "ct": 1512837151,
  "ut": 1512917652
}
22:54:23 完整请求
22:54:23 请求结束
22:54:23 cookie ['user=hgkllhdde8h8skdc']
22:54:23 path and query /todo/index {} 
22:54:23 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
22:54:23 完整请求
22:54:23 完整请求
22:54:23 请求结束
22:54:23 请求结束
22:54:23 cookie ['user=hgkllhdde8h8skdc']
22:54:23 cookie ['user=hgkllhdde8h8skdc']
22:54:23 path and query /static {'file': 'gua.js'} 
22:54:23 path and query /static {'file': 'todo.js'} 
22:54:23 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    log('todo', todo)
    //
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    //通过函数 e 抓取到 <button id='id-button-add'>add</button> 中的 id-button-add
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        ////通过函数 e 抓取到 <input id='id-input-todo'> 中的 id-input-todo
        var input = e('#id-input-todo')
        //拿到input框中用户输入的数据字段
        var title = input.value
        //打印出用户输入的数据字段
        log('click add', title)
        //设置form表单
        var form = {
            'title': title,
        }
        //调用 apiTodoAdd 函数异步加载数据
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            //调用 insertTodo 函数插入todo数据
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            log('form', form)
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                log('selector', selector)
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    //增加一条todo
    bindEventTodoAdd()
    //删除一条todo
    bindEventTodoDelete()
    //编辑一条tudo
    bindEventTodoEdit()
    //更新一条todo
    bindEventTodoUpdate()
}

var __main = function() {
    //绑定事件的函数
    bindEvents()
    //加载todo数据的函数
    loadTodos()
}

//函数主入口
__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:54:23 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:54:23 完整请求
22:54:23 请求结束
22:54:23 cookie ['user=hgkllhdde8h8skdc']
22:54:23 path and query /api/todo/all {} 
22:54:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "title": "dasd",
    "completed": false,
    "ct": 1512837151,
    "ut": 1512917652
  },
  {
    "id": 6,
    "title": "asd",
    "completed": false,
    "ct": 1512837305,
    "ut": 1512837305
  }
]
22:54:31 完整请求
22:54:31 请求结束
22:54:31 cookie ['user=hgkllhdde8h8skdc']
22:54:31 path and query /api/todo/update {} {"id":"5","title":"sdaqwee2213123213123"}
22:54:31 kwargs,  {'id': 5} <class 'dict'>
22:54:31 debug 0
22:54:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "title": "sdaqwee2213123213123",
  "completed": false,
  "ct": 1512837151,
  "ut": 1512917671
}
22:55:01 完整请求
22:55:01 请求结束
22:55:01 cookie ['user=hgkllhdde8h8skdc']
22:55:01 path and query /todo/index {} 
22:55:01 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
22:55:01 完整请求
22:55:01 完整请求
22:55:01 请求结束
22:55:01 请求结束
22:55:01 cookie ['user=hgkllhdde8h8skdc']
22:55:01 cookie ['user=hgkllhdde8h8skdc']
22:55:01 path and query /static {'file': 'gua.js'} 
22:55:01 path and query /static {'file': 'todo.js'} 
22:55:01 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
22:55:01 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    log('todo', todo)
    //
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    //通过函数 e 抓取到 <button id='id-button-add'>add</button> 中的 id-button-add
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        ////通过函数 e 抓取到 <input id='id-input-todo'> 中的 id-input-todo
        var input = e('#id-input-todo')
        //拿到input框中用户输入的数据字段
        var title = input.value
        //打印出用户输入的数据字段
        log('click add', title)
        //设置form表单
        var form = {
            'title': title,
        }
        //调用 apiTodoAdd 函数异步加载数据
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            //调用 insertTodo 函数插入todo数据
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            log('form', form)
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                log('selector', selector)
                var todoCell = e(selector)
                log('todoCell', todoCell)
                var titleSpan = todoCell.querySelector('.todo-title')
                log('titleSpan', titleSpan)
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    //增加一条todo
    bindEventTodoAdd()
    //删除一条todo
    bindEventTodoDelete()
    //编辑一条tudo
    bindEventTodoEdit()
    //更新一条todo
    bindEventTodoUpdate()
}

var __main = function() {
    //绑定事件的函数
    bindEvents()
    //加载todo数据的函数
    loadTodos()
}

//函数主入口
__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:55:01 完整请求
22:55:01 请求结束
22:55:01 cookie ['user=hgkllhdde8h8skdc']
22:55:01 path and query /api/todo/all {} 
22:55:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "title": "sdaqwee2213123213123",
    "completed": false,
    "ct": 1512837151,
    "ut": 1512917671
  },
  {
    "id": 6,
    "title": "asd",
    "completed": false,
    "ct": 1512837305,
    "ut": 1512837305
  }
]
22:55:07 完整请求
22:55:07 请求结束
22:55:07 cookie ['user=hgkllhdde8h8skdc']
22:55:07 path and query /api/todo/update {} {"id":"5","title":"12309298984234"}
22:55:07 kwargs,  {'id': 5} <class 'dict'>
22:55:07 debug 0
22:55:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "title": "12309298984234",
  "completed": false,
  "ct": 1512837151,
  "ut": 1512917707
}
23:10:18 完整请求
23:10:18 请求结束
23:10:18 cookie ['user=hgkllhdde8h8skdc']
23:10:18 path and query /weibo/index {} 
23:10:18 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:10:18 完整请求
23:10:18 请求结束
23:10:18 cookie ['user=hgkllhdde8h8skdc']
23:10:18 完整请求
23:10:18 请求结束
23:10:18 cookie ['user=hgkllhdde8h8skdc']
23:10:18 path and query /static {'file': 'weibo.js'} 
23:10:18 path and query /static {'file': 'gua.js'} 
23:10:18 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                ${ut}
            </div>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:10:18 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:10:18 完整请求
23:10:18 请求结束
23:10:18 cookie ['user=hgkllhdde8h8skdc']
23:10:18 path and query /api/weibo/all {} 
23:10:18 kwargs,  {'weibo_id': 5} <class 'dict'>
23:10:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512916885,
    "comments": []
  }
]
23:10:48 完整请求
23:10:48 完整请求
23:10:48 请求结束
23:10:48 请求结束
23:11:33 完整请求
23:11:33 请求结束
23:11:33 cookie ['user=hgkllhdde8h8skdc']
23:11:33 path and query /weibo/index {} 
23:11:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:11:33 完整请求
23:11:33 完整请求
23:11:33 请求结束
23:11:33 请求结束
23:11:33 cookie ['user=hgkllhdde8h8skdc']
23:11:33 cookie ['user=hgkllhdde8h8skdc']
23:11:33 path and query /static {'file': 'gua.js'} 
23:11:33 path and query /static {'file': 'weibo.js'} 
23:11:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:11:33 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <div>
                [WEIBO]: ${content}
                ${ut}
            </div>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:11:33 完整请求
23:11:33 请求结束
23:11:33 cookie ['user=hgkllhdde8h8skdc']
23:11:33 path and query /api/weibo/all {} 
23:11:33 kwargs,  {'weibo_id': 5} <class 'dict'>
23:11:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512916885,
    "comments": []
  }
]
23:12:04 完整请求
23:12:04 请求结束
23:12:04 cookie ['user=hgkllhdde8h8skdc']
23:12:04 path and query /weibo/index {} 
23:12:04 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:12:04 完整请求
23:12:04 完整请求
23:12:04 请求结束
23:12:04 请求结束
23:12:04 cookie ['user=hgkllhdde8h8skdc']
23:12:04 cookie ['user=hgkllhdde8h8skdc']
23:12:04 path and query /static {'file': 'weibo.js'} 
23:12:04 path and query /static {'file': 'gua.js'} 
23:12:04 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:12:04 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:12:04 完整请求
23:12:04 请求结束
23:12:04 cookie ['user=hgkllhdde8h8skdc']
23:12:04 path and query /api/weibo/all {} 
23:12:04 kwargs,  {'weibo_id': 5} <class 'dict'>
23:12:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512916885,
    "comments": []
  }
]
23:12:20 完整请求
23:12:20 请求结束
23:12:20 cookie ['user=hgkllhdde8h8skdc']
23:12:20 path and query /api/weibo/update {} {"id":"5","content":"s123123123"}
23:12:20 kwargs,  {'id': 5} <class 'dict'>
23:12:20 debug 0
23:12:20 kwargs,  {'weibo_id': 5} <class 'dict'>
23:12:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512918740,
  "comments": []
}
23:12:26 完整请求
23:12:26 请求结束
23:12:26 cookie ['user=hgkllhdde8h8skdc']
23:12:26 path and query /api/weibo/update {} 
23:12:27 完整请求
23:12:27 请求结束
23:12:27 cookie ['user=hgkllhdde8h8skdc']
23:12:27 path and query /api/weibo/update {} {"id":"5","content":"s123123123"}
23:12:27 kwargs,  {'id': 5} <class 'dict'>
23:12:27 debug 0
23:12:27 kwargs,  {'weibo_id': 5} <class 'dict'>
23:12:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512918747,
  "comments": []
}
23:12:34 完整请求
23:12:34 请求结束
23:12:34 cookie ['user=hgkllhdde8h8skdc']
23:12:34 path and query /weibo/index {} 
23:12:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:12:34 完整请求
23:12:34 请求结束
23:12:34 完整请求
23:12:34 请求结束
23:12:34 cookie ['user=hgkllhdde8h8skdc']
23:12:34 cookie ['user=hgkllhdde8h8skdc']
23:12:34 path and query /static {'file': 'weibo.js'} 
23:12:34 path and query /static {'file': 'gua.js'} 
23:12:34 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:12:34 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:12:34 完整请求
23:12:34 请求结束
23:12:34 cookie ['user=hgkllhdde8h8skdc']
23:12:34 path and query /api/weibo/all {} 
23:12:34 kwargs,  {'weibo_id': 5} <class 'dict'>
23:12:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512918747,
    "comments": []
  }
]
23:13:23 完整请求
23:13:23 请求结束
23:13:23 cookie ['user=hgkllhdde8h8skdc']
23:13:23 path and query /weibo/index {} 
23:13:23 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:13:23 完整请求
23:13:23 请求结束
23:13:23 完整请求
23:13:23 cookie ['user=hgkllhdde8h8skdc']
23:13:23 请求结束
23:13:23 cookie ['user=hgkllhdde8h8skdc']
23:13:23 path and query /static {'file': 'gua.js'} 
23:13:23 path and query /static {'file': 'weibo.js'} 
23:13:23 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:13:23 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:13:23 完整请求
23:13:23 请求结束
23:13:23 cookie ['user=hgkllhdde8h8skdc']
23:13:23 path and query /api/weibo/all {} 
23:13:23 kwargs,  {'weibo_id': 5} <class 'dict'>
23:13:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512918747,
    "comments": []
  }
]
23:13:34 完整请求
23:13:34 请求结束
23:13:34 cookie ['user=hgkllhdde8h8skdc']
23:13:34 path and query /api/weibo/update {} {"id":"5","content":"2122"}
23:13:34 kwargs,  {'id': 5} <class 'dict'>
23:13:34 debug 0
23:13:34 kwargs,  {'weibo_id': 5} <class 'dict'>
23:13:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512918814,
  "comments": []
}
23:13:54 完整请求
23:13:54 请求结束
23:13:54 cookie ['user=hgkllhdde8h8skdc']
23:13:54 path and query /api/weibo/update {} {"id":"5","content":"2122"}
23:13:54 kwargs,  {'id': 5} <class 'dict'>
23:13:54 debug 0
23:13:54 kwargs,  {'weibo_id': 5} <class 'dict'>
23:13:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512918834,
  "comments": []
}
23:15:14 完整请求
23:15:14 请求结束
23:15:14 cookie ['user=hgkllhdde8h8skdc']
23:15:14 path and query /weibo/index {} 
23:15:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:15:14 完整请求
23:15:14 完整请求
23:15:14 请求结束
23:15:14 请求结束
23:15:14 cookie ['user=hgkllhdde8h8skdc']
23:15:14 cookie ['user=hgkllhdde8h8skdc']
23:15:14 path and query /static {'file': 'weibo.js'} 
23:15:14 path and query /static {'file': 'gua.js'} 
23:15:14 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:15:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:15:14 完整请求
23:15:14 请求结束
23:15:14 cookie ['user=hgkllhdde8h8skdc']
23:15:14 path and query /api/weibo/all {} 
23:15:14 kwargs,  {'weibo_id': 5} <class 'dict'>
23:15:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512918834,
    "comments": []
  }
]
23:15:18 完整请求
23:15:18 请求结束
23:15:18 cookie ['user=hgkllhdde8h8skdc']
23:15:18 path and query /api/weibo/update {} {"id":"5","content":"1212121212"}
23:15:18 kwargs,  {'id': 5} <class 'dict'>
23:15:18 debug 0
23:15:18 kwargs,  {'weibo_id': 5} <class 'dict'>
23:15:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512918918,
  "comments": []
}
23:15:20 完整请求
23:15:20 请求结束
23:15:20 cookie ['user=hgkllhdde8h8skdc']
23:15:20 path and query /api/weibo/update {} 
23:16:11 完整请求
23:16:11 请求结束
23:16:11 cookie ['user=hgkllhdde8h8skdc']
23:16:11 path and query /weibo/index {} 
23:16:11 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:16:11 完整请求
23:16:11 完整请求
23:16:11 请求结束
23:16:11 请求结束
23:16:11 cookie ['user=hgkllhdde8h8skdc']
23:16:11 path and query /static {'file': 'gua.js'} 
23:16:11 cookie ['user=hgkllhdde8h8skdc']
23:16:11 path and query /static {'file': 'weibo.js'} 
23:16:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:16:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:16:11 完整请求
23:16:11 请求结束
23:16:11 cookie ['user=hgkllhdde8h8skdc']
23:16:11 path and query /api/weibo/all {} 
23:16:11 kwargs,  {'weibo_id': 5} <class 'dict'>
23:16:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512918918,
    "comments": []
  }
]
23:16:15 完整请求
23:16:15 请求结束
23:16:15 cookie ['user=hgkllhdde8h8skdc']
23:16:15 path and query /api/weibo/update {} 
23:16:17 完整请求
23:16:17 请求结束
23:16:17 cookie ['user=hgkllhdde8h8skdc']
23:16:17 path and query /api/weibo/update {} {"id":"5","content":"121212121"}
23:16:17 kwargs,  {'id': 5} <class 'dict'>
23:16:17 debug 0
23:16:17 kwargs,  {'weibo_id': 5} <class 'dict'>
23:16:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512918977,
  "comments": []
}
23:16:49 完整请求
23:16:49 请求结束
23:16:49 cookie ['user=hgkllhdde8h8skdc']
23:16:49 path and query /weibo/index {} 
23:16:49 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:16:49 完整请求
23:16:49 完整请求
23:16:49 请求结束
23:16:49 请求结束
23:16:49 cookie ['user=hgkllhdde8h8skdc']
23:16:49 cookie ['user=hgkllhdde8h8skdc']
23:16:49 path and query /static {'file': 'weibo.js'} 
23:16:49 path and query /static {'file': 'gua.js'} 
23:16:49 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:16:49 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:16:49 完整请求
23:16:49 请求结束
23:16:49 cookie ['user=hgkllhdde8h8skdc']
23:16:49 path and query /api/weibo/all {} 
23:16:49 kwargs,  {'weibo_id': 5} <class 'dict'>
23:16:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512918977,
    "comments": []
  }
]
23:16:53 完整请求
23:16:53 请求结束
23:16:53 cookie ['user=hgkllhdde8h8skdc']
23:16:53 path and query /api/weibo/update {} 
23:17:15 完整请求
23:17:15 请求结束
23:17:15 cookie ['user=hgkllhdde8h8skdc']
23:17:15 path and query /api/weibo/update {} {"id":"5","content":"12"}
23:17:15 kwargs,  {'id': 5} <class 'dict'>
23:17:15 debug 0
23:17:15 kwargs,  {'weibo_id': 5} <class 'dict'>
23:17:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512919035,
  "comments": []
}
23:17:24 完整请求
23:17:24 请求结束
23:17:24 cookie ['user=hgkllhdde8h8skdc']
23:17:24 path and query /weibo/index {} 
23:17:24 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:17:24 完整请求
23:17:24 完整请求
23:17:24 请求结束
23:17:24 请求结束
23:17:24 cookie ['user=hgkllhdde8h8skdc']
23:17:24 cookie ['user=hgkllhdde8h8skdc']
23:17:24 path and query /static {'file': 'weibo.js'} 
23:17:24 path and query /static {'file': 'gua.js'} 
23:17:24 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:17:24 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:17:24 完整请求
23:17:24 请求结束
23:17:24 cookie ['user=hgkllhdde8h8skdc']
23:17:24 path and query /api/weibo/all {} 
23:17:24 kwargs,  {'weibo_id': 5} <class 'dict'>
23:17:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512919035,
    "comments": []
  }
]
23:17:27 完整请求
23:17:27 请求结束
23:17:27 cookie ['user=hgkllhdde8h8skdc']
23:17:27 path and query /api/weibo/update {} {"id":"5","content":"121"}
23:17:27 kwargs,  {'id': 5} <class 'dict'>
23:17:27 debug 0
23:17:27 kwargs,  {'weibo_id': 5} <class 'dict'>
23:17:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512919047,
  "comments": []
}
23:18:32 完整请求
23:18:32 请求结束
23:18:32 cookie ['user=hgkllhdde8h8skdc']
23:18:32 path and query /weibo/index {} 
23:18:32 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:18:32 完整请求
23:18:32 完整请求
23:18:32 请求结束
23:18:32 请求结束
23:18:32 cookie ['user=hgkllhdde8h8skdc']
23:18:32 cookie ['user=hgkllhdde8h8skdc']
23:18:32 path and query /static {'file': 'weibo.js'} 
23:18:32 path and query /static {'file': 'gua.js'} 
23:18:32 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:18:32 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:18:32 完整请求
23:18:32 请求结束
23:18:32 cookie ['user=hgkllhdde8h8skdc']
23:18:32 path and query /api/weibo/all {} 
23:18:32 kwargs,  {'weibo_id': 5} <class 'dict'>
23:18:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512919047,
    "comments": []
  }
]
23:18:35 完整请求
23:18:35 请求结束
23:18:35 cookie ['user=hgkllhdde8h8skdc']
23:18:35 path and query /api/weibo/update {} 
23:18:40 完整请求
23:18:40 请求结束
23:18:40 cookie ['user=hgkllhdde8h8skdc']
23:18:40 path and query /api/weibo/update {} {"id":"5","content":"1212"}
23:18:40 kwargs,  {'id': 5} <class 'dict'>
23:18:40 debug 0
23:18:40 kwargs,  {'weibo_id': 5} <class 'dict'>
23:18:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512919120,
  "comments": []
}
23:18:46 完整请求
23:18:46 请求结束
23:18:46 cookie ['user=hgkllhdde8h8skdc']
23:18:46 path and query /api/weibo/update {} {"id":"5","content":"1212"}
23:18:46 kwargs,  {'id': 5} <class 'dict'>
23:18:46 debug 0
23:18:46 kwargs,  {'weibo_id': 5} <class 'dict'>
23:18:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512919126,
  "comments": []
}
23:19:19 完整请求
23:19:19 请求结束
23:19:19 cookie ['user=hgkllhdde8h8skdc']
23:19:19 path and query /weibo/index {} 
23:19:19 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:19:19 完整请求
23:19:19 完整请求
23:19:19 请求结束
23:19:19 请求结束
23:19:19 cookie ['user=hgkllhdde8h8skdc']
23:19:19 cookie ['user=hgkllhdde8h8skdc']
23:19:19 path and query /static {'file': 'weibo.js'} 
23:19:19 path and query /static {'file': 'gua.js'} 
23:19:19 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:19:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:19:20 完整请求
23:19:20 请求结束
23:19:20 cookie ['user=hgkllhdde8h8skdc']
23:19:20 path and query /api/weibo/all {} 
23:19:20 kwargs,  {'weibo_id': 5} <class 'dict'>
23:19:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512919126,
    "comments": []
  }
]
23:19:23 完整请求
23:19:23 请求结束
23:19:23 cookie ['user=hgkllhdde8h8skdc']
23:19:23 path and query /api/weibo/update {} {"id":"5","content":"12121"}
23:19:23 kwargs,  {'id': 5} <class 'dict'>
23:19:23 debug 0
23:19:23 kwargs,  {'weibo_id': 5} <class 'dict'>
23:19:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512919163,
  "comments": []
}
23:22:48 完整请求
23:22:48 请求结束
23:22:48 cookie ['user=hgkllhdde8h8skdc']
23:22:48 path and query /weibo/index {} 
23:22:48 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:22:48 完整请求
23:22:48 完整请求
23:22:48 请求结束
23:22:48 请求结束
23:22:48 cookie ['user=hgkllhdde8h8skdc']
23:22:48 cookie ['user=hgkllhdde8h8skdc']
23:22:48 path and query /static {'file': 'weibo.js'} 
23:22:48 path and query /static {'file': 'gua.js'} 
23:22:48 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:22:48 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:22:49 完整请求
23:22:49 请求结束
23:22:49 cookie ['user=hgkllhdde8h8skdc']
23:22:49 path and query /api/weibo/all {} 
23:22:49 kwargs,  {'weibo_id': 5} <class 'dict'>
23:22:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512919163,
    "comments": []
  }
]
23:22:52 完整请求
23:22:52 请求结束
23:22:52 cookie ['user=hgkllhdde8h8skdc']
23:22:52 path and query /api/weibo/update {} {"id":"5","content":"qweqwewqe"}
23:22:52 kwargs,  {'id': 5} <class 'dict'>
23:22:52 debug 0
23:22:52 kwargs,  {'weibo_id': 5} <class 'dict'>
23:22:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512919372,
  "comments": []
}
23:25:09 完整请求
23:25:09 请求结束
23:25:09 cookie ['user=hgkllhdde8h8skdc']
23:25:09 path and query /weibo/index {} 
23:25:09 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:25:09 完整请求
23:25:09 完整请求
23:25:09 请求结束
23:25:09 请求结束
23:25:09 cookie ['user=hgkllhdde8h8skdc']
23:25:09 cookie ['user=hgkllhdde8h8skdc']
23:25:09 path and query /static {'file': 'gua.js'} 
23:25:09 path and query /static {'file': 'weibo.js'} 
23:25:09 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:25:09 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id} data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:25:09 完整请求
23:25:09 请求结束
23:25:09 cookie ['user=hgkllhdde8h8skdc']
23:25:09 path and query /api/weibo/all {} 
23:25:09 kwargs,  {'weibo_id': 5} <class 'dict'>
23:25:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512919372,
    "comments": []
  }
]
23:25:13 完整请求
23:25:13 请求结束
23:25:13 cookie ['user=hgkllhdde8h8skdc']
23:25:13 path and query /api/weibo/update {} 
23:25:15 完整请求
23:25:15 请求结束
23:25:15 cookie ['user=hgkllhdde8h8skdc']
23:25:15 path and query /api/weibo/update {} {"content":"1212"}
23:25:18 完整请求
23:25:18 请求结束
23:25:18 cookie ['user=hgkllhdde8h8skdc']
23:25:18 path and query /api/weibo/update {} {"content":"1212"}
23:26:28 完整请求
23:26:28 请求结束
23:26:28 cookie ['user=hgkllhdde8h8skdc']
23:26:28 path and query /weibo/index {} 
23:26:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:26:28 完整请求
23:26:28 完整请求
23:26:28 请求结束
23:26:28 请求结束
23:26:28 cookie ['user=hgkllhdde8h8skdc']
23:26:28 cookie ['user=hgkllhdde8h8skdc']
23:26:28 path and query /static {'file': 'weibo.js'} 
23:26:28 path and query /static {'file': 'gua.js'} 
23:26:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var titleSpan = WeiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:26:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:26:28 完整请求
23:26:28 请求结束
23:26:28 cookie ['user=hgkllhdde8h8skdc']
23:26:28 path and query /api/weibo/all {} 
23:26:28 kwargs,  {'weibo_id': 5} <class 'dict'>
23:26:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512919372,
    "comments": []
  }
]
23:26:31 完整请求
23:26:31 请求结束
23:26:31 cookie ['user=hgkllhdde8h8skdc']
23:26:31 path and query /api/weibo/update {} {"id":"5","content":"2"}
23:26:31 kwargs,  {'id': 5} <class 'dict'>
23:26:31 debug 0
23:26:31 kwargs,  {'weibo_id': 5} <class 'dict'>
23:26:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512919591,
  "comments": []
}
23:26:38 完整请求
23:26:38 请求结束
23:26:38 cookie ['user=hgkllhdde8h8skdc']
23:26:38 path and query /api/weibo/update {} {"id":"5","content":"2"}
23:26:38 kwargs,  {'id': 5} <class 'dict'>
23:26:38 debug 0
23:26:38 kwargs,  {'weibo_id': 5} <class 'dict'>
23:26:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512919598,
  "comments": []
}
23:26:41 完整请求
23:26:41 请求结束
23:26:41 cookie ['user=hgkllhdde8h8skdc']
23:26:41 path and query /api/weibo/update {} {"id":"5","content":"2"}
23:26:41 kwargs,  {'id': 5} <class 'dict'>
23:26:41 debug 0
23:26:41 kwargs,  {'weibo_id': 5} <class 'dict'>
23:26:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512919601,
  "comments": []
}
23:26:41 完整请求
23:26:41 请求结束
23:26:41 cookie ['user=hgkllhdde8h8skdc']
23:26:41 path and query /api/weibo/update {} 
23:26:46 完整请求
23:26:46 请求结束
23:26:46 cookie ['user=hgkllhdde8h8skdc']
23:26:46 path and query /api/weibo/update {} {"id":"5","content":"2"}
23:26:46 kwargs,  {'id': 5} <class 'dict'>
23:26:46 debug 0
23:26:46 kwargs,  {'weibo_id': 5} <class 'dict'>
23:26:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512919606,
  "comments": []
}
23:27:24 完整请求
23:27:24 请求结束
23:27:24 cookie ['user=hgkllhdde8h8skdc']
23:27:24 path and query /api/weibo/update {} 
23:27:27 完整请求
23:27:27 请求结束
23:27:27 cookie ['user=hgkllhdde8h8skdc']
23:27:27 path and query /api/weibo/update {} {"id":"5","content":"asdd"}
23:27:27 kwargs,  {'id': 5} <class 'dict'>
23:27:27 debug 0
23:27:27 kwargs,  {'weibo_id': 5} <class 'dict'>
23:27:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512919647,
  "comments": []
}
23:36:20 完整请求
23:36:20 请求结束
23:36:20 cookie ['user=hgkllhdde8h8skdc']
23:36:20 path and query /weibo/index {} 
23:36:20 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:36:20 完整请求
23:36:20 完整请求
23:36:20 请求结束
23:36:20 请求结束
23:36:20 cookie ['user=hgkllhdde8h8skdc']
23:36:20 cookie ['user=hgkllhdde8h8skdc']
23:36:20 path and query /static {'file': 'gua.js'} 
23:36:20 path and query /static {'file': 'weibo.js'} 
23:36:20 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:36:20 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:36:20 完整请求
23:36:20 请求结束
23:36:20 cookie ['user=hgkllhdde8h8skdc']
23:36:21 path and query /api/weibo/all {} 
23:36:21 kwargs,  {'weibo_id': 5} <class 'dict'>
23:36:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512919647,
    "comments": []
  }
]
23:36:24 完整请求
23:36:24 请求结束
23:36:24 cookie ['user=hgkllhdde8h8skdc']
23:36:24 path and query /api/weibo/update {} {"id":"5","content":"12121"}
23:36:24 kwargs,  {'id': 5} <class 'dict'>
23:36:24 debug 0
23:36:24 kwargs,  {'weibo_id': 5} <class 'dict'>
23:36:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920184,
  "comments": []
}
23:36:50 完整请求
23:36:50 请求结束
23:36:50 cookie ['user=hgkllhdde8h8skdc']
23:36:50 path and query /weibo/index {} 
23:36:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:36:50 完整请求
23:36:50 完整请求
23:36:50 请求结束
23:36:50 请求结束
23:36:50 cookie ['user=hgkllhdde8h8skdc']
23:36:50 path and query /static {'file': 'gua.js'} 
23:36:50 cookie ['user=hgkllhdde8h8skdc']
23:36:50 path and query /static {'file': 'weibo.js'} 
23:36:50 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:36:50 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = Weibo.content
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:36:50 完整请求
23:36:50 请求结束
23:36:50 cookie ['user=hgkllhdde8h8skdc']
23:36:50 path and query /api/weibo/all {} 
23:36:50 kwargs,  {'weibo_id': 5} <class 'dict'>
23:36:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512920184,
    "comments": []
  }
]
23:36:54 完整请求
23:36:54 请求结束
23:36:54 cookie ['user=hgkllhdde8h8skdc']
23:36:54 path and query /api/weibo/update {} 
23:36:55 完整请求
23:36:55 请求结束
23:36:55 cookie ['user=hgkllhdde8h8skdc']
23:36:55 path and query /api/weibo/update {} {"id":"5","content":"1123213213"}
23:36:55 kwargs,  {'id': 5} <class 'dict'>
23:36:55 debug 0
23:36:55 kwargs,  {'weibo_id': 5} <class 'dict'>
23:36:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920215,
  "comments": []
}
23:42:59 完整请求
23:42:59 请求结束
23:42:59 cookie ['user=hgkllhdde8h8skdc']
23:42:59 path and query /weibo/index {} 
23:42:59 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:42:59 完整请求
23:42:59 请求结束
23:42:59 cookie ['user=hgkllhdde8h8skdc']
23:42:59 完整请求
23:42:59 path and query /static {'file': 'gua.js'} 
23:42:59 请求结束
23:42:59 cookie ['user=hgkllhdde8h8skdc']
23:42:59 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:42:59 path and query /static {'file': 'weibo.js'} 
23:42:59 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = Weibo.content
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:42:59 完整请求
23:42:59 请求结束
23:42:59 cookie ['user=hgkllhdde8h8skdc']
23:42:59 path and query /api/weibo/all {} 
23:42:59 kwargs,  {'weibo_id': 5} <class 'dict'>
23:42:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512920215,
    "comments": []
  }
]
23:43:03 完整请求
23:43:03 请求结束
23:43:03 cookie ['user=hgkllhdde8h8skdc']
23:43:03 path and query /api/weibo/update {} {"id":"5","content":"12121212"}
23:43:03 kwargs,  {'id': 5} <class 'dict'>
23:43:03 debug 0
23:43:03 kwargs,  {'weibo_id': 5} <class 'dict'>
23:43:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920583,
  "comments": []
}
23:43:06 完整请求
23:43:06 请求结束
23:43:06 cookie ['user=hgkllhdde8h8skdc']
23:43:06 path and query /api/weibo/update {} {"id":"5","content":"12121212"}
23:43:06 kwargs,  {'id': 5} <class 'dict'>
23:43:06 debug 0
23:43:06 kwargs,  {'weibo_id': 5} <class 'dict'>
23:43:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920586,
  "comments": []
}
23:43:10 完整请求
23:43:10 请求结束
23:43:10 cookie ['user=hgkllhdde8h8skdc']
23:43:10 path and query /api/weibo/update {} 
23:43:10 完整请求
23:43:10 请求结束
23:43:10 cookie ['user=hgkllhdde8h8skdc']
23:43:10 path and query /api/weibo/update {} {"id":"5","content":"12121212"}
23:43:10 kwargs,  {'id': 5} <class 'dict'>
23:43:10 debug 0
23:43:10 kwargs,  {'weibo_id': 5} <class 'dict'>
23:43:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920590,
  "comments": []
}
23:43:10 完整请求
23:43:10 请求结束
23:43:10 cookie ['user=hgkllhdde8h8skdc']
23:43:10 path and query /api/weibo/update {} {"id":"5","content":"12121212"}
23:43:10 kwargs,  {'id': 5} <class 'dict'>
23:43:10 debug 0
23:43:10 kwargs,  {'weibo_id': 5} <class 'dict'>
23:43:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920590,
  "comments": []
}
23:43:10 完整请求
23:43:10 请求结束
23:43:10 cookie ['user=hgkllhdde8h8skdc']
23:43:10 path and query /api/weibo/update {} {"id":"5","content":"12121212"}
23:43:10 kwargs,  {'id': 5} <class 'dict'>
23:43:10 debug 0
23:43:10 kwargs,  {'weibo_id': 5} <class 'dict'>
23:43:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920590,
  "comments": []
}
23:44:16 完整请求
23:44:16 请求结束
23:44:16 cookie ['user=hgkllhdde8h8skdc']
23:44:16 path and query /api/weibo/update {} {"id":"5","content":"12121212"}
23:44:16 kwargs,  {'id': 5} <class 'dict'>
23:44:16 debug 0
23:44:16 kwargs,  {'weibo_id': 5} <class 'dict'>
23:44:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920656,
  "comments": []
}
23:47:19 完整请求
23:47:19 请求结束
23:47:19 cookie ['user=hgkllhdde8h8skdc']
23:47:19 path and query /weibo/index {} 
23:47:19 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:47:19 完整请求
23:47:19 完整请求
23:47:19 请求结束
23:47:19 请求结束
23:47:19 cookie ['user=hgkllhdde8h8skdc']
23:47:19 cookie ['user=hgkllhdde8h8skdc']
23:47:19 path and query /static {'file': 'weibo.js'} 
23:47:19 path and query /static {'file': 'gua.js'} 
23:47:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = Weibo.input
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:47:19 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:47:19 完整请求
23:47:19 请求结束
23:47:19 cookie ['user=hgkllhdde8h8skdc']
23:47:19 path and query /api/weibo/all {} 
23:47:19 kwargs,  {'weibo_id': 5} <class 'dict'>
23:47:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512920656,
    "comments": []
  }
]
23:47:22 完整请求
23:47:22 请求结束
23:47:22 cookie ['user=hgkllhdde8h8skdc']
23:47:22 path and query /api/weibo/update {} 
23:47:23 完整请求
23:47:23 请求结束
23:47:23 cookie ['user=hgkllhdde8h8skdc']
23:47:23 path and query /api/weibo/update {} {"id":"5","content":"12121212"}
23:47:23 kwargs,  {'id': 5} <class 'dict'>
23:47:23 debug 0
23:47:23 kwargs,  {'weibo_id': 5} <class 'dict'>
23:47:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920843,
  "comments": []
}
23:47:45 完整请求
23:47:45 请求结束
23:47:45 cookie ['user=hgkllhdde8h8skdc']
23:47:45 path and query /weibo/index {} 
23:47:45 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:47:45 完整请求
23:47:45 完整请求
23:47:45 请求结束
23:47:45 请求结束
23:47:45 cookie ['user=hgkllhdde8h8skdc']
23:47:45 cookie ['user=hgkllhdde8h8skdc']
23:47:45 path and query /static {'file': 'weibo.js'} 
23:47:45 path and query /static {'file': 'gua.js'} 
23:47:45 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = Weibo.content
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:47:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:47:45 完整请求
23:47:45 请求结束
23:47:45 cookie ['user=hgkllhdde8h8skdc']
23:47:45 path and query /api/weibo/all {} 
23:47:45 kwargs,  {'weibo_id': 5} <class 'dict'>
23:47:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512920843,
    "comments": []
  }
]
23:47:48 完整请求
23:47:48 请求结束
23:47:48 cookie ['user=hgkllhdde8h8skdc']
23:47:48 path and query /api/weibo/update {} 
23:47:50 完整请求
23:47:50 请求结束
23:47:50 cookie ['user=hgkllhdde8h8skdc']
23:47:50 path and query /api/weibo/update {} {"id":"5","content":"1212"}
23:47:50 kwargs,  {'id': 5} <class 'dict'>
23:47:50 debug 0
23:47:50 kwargs,  {'weibo_id': 5} <class 'dict'>
23:47:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920870,
  "comments": []
}
23:48:53 完整请求
23:48:53 请求结束
23:48:53 cookie ['user=hgkllhdde8h8skdc']
23:48:53 path and query /weibo/index {} 
23:48:53 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:48:53 完整请求
23:48:53 完整请求
23:48:53 请求结束
23:48:53 cookie ['user=hgkllhdde8h8skdc']
23:48:53 请求结束
23:48:53 cookie ['user=hgkllhdde8h8skdc']
23:48:53 path and query /static {'file': 'gua.js'} 
23:48:53 path and query /static {'file': 'weibo.js'} 
23:48:53 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:48:53 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:48:54 完整请求
23:48:54 请求结束
23:48:54 cookie ['user=hgkllhdde8h8skdc']
23:48:54 path and query /api/weibo/all {} 
23:48:54 kwargs,  {'weibo_id': 5} <class 'dict'>
23:48:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512920870,
    "comments": []
  }
]
23:48:56 完整请求
23:48:56 请求结束
23:48:56 cookie ['user=hgkllhdde8h8skdc']
23:48:56 path and query /api/weibo/update {} 
23:48:58 完整请求
23:48:58 请求结束
23:48:58 cookie ['user=hgkllhdde8h8skdc']
23:48:58 path and query /api/weibo/update {} {"id":"5","content":"qw"}
23:48:58 kwargs,  {'id': 5} <class 'dict'>
23:48:58 debug 0
23:48:58 kwargs,  {'weibo_id': 5} <class 'dict'>
23:48:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920938,
  "comments": []
}
23:49:07 完整请求
23:49:07 请求结束
23:49:07 cookie ['user=hgkllhdde8h8skdc']
23:49:07 path and query /api/weibo/update {} 
23:49:07 完整请求
23:49:07 请求结束
23:49:07 cookie ['user=hgkllhdde8h8skdc']
23:49:07 path and query /api/weibo/update {} {"id":"5","content":"qw"}
23:49:07 kwargs,  {'id': 5} <class 'dict'>
23:49:07 debug 0
23:49:07 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920947,
  "comments": []
}
23:49:08 完整请求
23:49:08 请求结束
23:49:08 cookie ['user=hgkllhdde8h8skdc']
23:49:08 path and query /api/weibo/update {} {"id":"5","content":"qw"}
23:49:08 kwargs,  {'id': 5} <class 'dict'>
23:49:08 debug 0
23:49:08 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920948,
  "comments": []
}
23:49:09 完整请求
23:49:09 请求结束
23:49:09 cookie ['user=hgkllhdde8h8skdc']
23:49:09 path and query /api/weibo/update {} 
23:49:12 完整请求
23:49:12 请求结束
23:49:12 cookie ['user=hgkllhdde8h8skdc']
23:49:12 path and query /api/weibo/update {} {"id":"5","content":"qwqe"}
23:49:12 kwargs,  {'id': 5} <class 'dict'>
23:49:12 debug 0
23:49:12 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920952,
  "comments": []
}
23:49:14 完整请求
23:49:14 请求结束
23:49:14 cookie ['user=hgkllhdde8h8skdc']
23:49:14 path and query /api/weibo/update {} {"id":"5","content":"qwqe"}
23:49:14 kwargs,  {'id': 5} <class 'dict'>
23:49:14 debug 0
23:49:14 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920954,
  "comments": []
}
23:49:17 完整请求
23:49:17 请求结束
23:49:17 cookie ['user=hgkllhdde8h8skdc']
23:49:17 path and query /api/weibo/update {} {"id":"5","content":"12131232"}
23:49:17 kwargs,  {'id': 5} <class 'dict'>
23:49:17 debug 0
23:49:17 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920957,
  "comments": []
}
23:49:18 完整请求
23:49:18 请求结束
23:49:18 cookie ['user=hgkllhdde8h8skdc']
23:49:18 path and query /api/weibo/update {} {"id":"5","content":"12131232"}
23:49:18 kwargs,  {'id': 5} <class 'dict'>
23:49:18 debug 0
23:49:18 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920958,
  "comments": []
}
23:49:24 完整请求
23:49:24 请求结束
23:49:24 cookie ['user=hgkllhdde8h8skdc']
23:49:24 path and query /api/weibo/update {} {"id":"5","content":"123123213"}
23:49:24 kwargs,  {'id': 5} <class 'dict'>
23:49:24 debug 0
23:49:24 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920964,
  "comments": []
}
23:49:24 完整请求
23:49:24 请求结束
23:49:24 cookie ['user=hgkllhdde8h8skdc']
23:49:24 path and query /api/weibo/update {} {"id":"5","content":"123123213"}
23:49:24 kwargs,  {'id': 5} <class 'dict'>
23:49:24 debug 0
23:49:24 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920964,
  "comments": []
}
23:49:24 完整请求
23:49:24 请求结束
23:49:24 cookie ['user=hgkllhdde8h8skdc']
23:49:24 path and query /api/weibo/update {} 
23:49:28 完整请求
23:49:28 请求结束
23:49:28 cookie ['user=hgkllhdde8h8skdc']
23:49:28 path and query /api/weibo/update {} {"id":"5","content":"rererer"}
23:49:28 kwargs,  {'id': 5} <class 'dict'>
23:49:28 debug 0
23:49:28 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920968,
  "comments": []
}
23:49:28 完整请求
23:49:28 请求结束
23:49:28 cookie ['user=hgkllhdde8h8skdc']
23:49:28 path and query /api/weibo/update {} {"id":"5","content":"rererer"}
23:49:28 kwargs,  {'id': 5} <class 'dict'>
23:49:28 debug 0
23:49:28 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920968,
  "comments": []
}
23:49:32 完整请求
23:49:32 请求结束
23:49:32 cookie ['user=hgkllhdde8h8skdc']
23:49:32 path and query /api/weibo/update {} {"id":"5","content":"qe12ewqew"}
23:49:32 kwargs,  {'id': 5} <class 'dict'>
23:49:32 debug 0
23:49:32 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920972,
  "comments": []
}
23:49:32 完整请求
23:49:32 请求结束
23:49:32 cookie ['user=hgkllhdde8h8skdc']
23:49:32 path and query /api/weibo/update {} {"id":"5","content":"qe12ewqew"}
23:49:32 kwargs,  {'id': 5} <class 'dict'>
23:49:32 debug 0
23:49:32 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920972,
  "comments": []
}
23:49:32 完整请求
23:49:32 请求结束
23:49:32 cookie ['user=hgkllhdde8h8skdc']
23:49:32 path and query /api/weibo/update {} {"id":"5","content":"qe12ewqew"}
23:49:32 kwargs,  {'id': 5} <class 'dict'>
23:49:32 debug 0
23:49:32 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920972,
  "comments": []
}
23:49:32 完整请求
23:49:32 请求结束
23:49:32 cookie ['user=hgkllhdde8h8skdc']
23:49:32 path and query /api/weibo/update {} {"id":"5","content":"qe12ewqew"}
23:49:32 kwargs,  {'id': 5} <class 'dict'>
23:49:32 debug 0
23:49:32 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920972,
  "comments": []
}
23:49:47 完整请求
23:49:47 请求结束
23:49:47 cookie ['user=hgkllhdde8h8skdc']
23:49:47 path and query /api/weibo/update {} {"id":"5","content":"qe12ewqewqwewe"}
23:49:47 kwargs,  {'id': 5} <class 'dict'>
23:49:47 debug 0
23:49:47 kwargs,  {'weibo_id': 5} <class 'dict'>
23:49:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512920987,
  "comments": []
}
23:51:02 完整请求
23:51:02 请求结束
23:51:02 cookie ['user=hgkllhdde8h8skdc']
23:51:02 path and query /weibo/index {} 
23:51:02 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:51:02 完整请求
23:51:02 完整请求
23:51:02 请求结束
23:51:02 请求结束
23:51:02 cookie ['user=hgkllhdde8h8skdc']
23:51:02 cookie ['user=hgkllhdde8h8skdc']
23:51:02 path and query /static {'file': 'gua.js'} 
23:51:02 path and query /static {'file': 'weibo.js'} 
23:51:02 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" value="232">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:51:02 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:51:02 完整请求
23:51:02 请求结束
23:51:02 cookie ['user=hgkllhdde8h8skdc']
23:51:02 path and query /api/weibo/all {} 
23:51:02 kwargs,  {'weibo_id': 5} <class 'dict'>
23:51:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512920987,
    "comments": []
  }
]
23:51:44 完整请求
23:51:44 请求结束
23:51:44 cookie ['user=hgkllhdde8h8skdc']
23:51:44 path and query /weibo/index {} 
23:51:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:51:44 完整请求
23:51:44 完整请求
23:51:44 请求结束
23:51:44 请求结束
23:51:44 cookie ['user=hgkllhdde8h8skdc']
23:51:44 cookie ['user=hgkllhdde8h8skdc']
23:51:44 path and query /static {'file': 'weibo.js'} 
23:51:44 path and query /static {'file': 'gua.js'} 
23:51:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:51:44 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:51:44 完整请求
23:51:44 请求结束
23:51:44 cookie ['user=hgkllhdde8h8skdc']
23:51:44 path and query /api/weibo/all {} 
23:51:44 kwargs,  {'weibo_id': 5} <class 'dict'>
23:51:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512920987,
    "comments": []
  }
]
23:51:50 完整请求
23:51:50 请求结束
23:51:50 cookie ['user=hgkllhdde8h8skdc']
23:51:50 path and query /weibo/index {} 
23:51:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:51:50 完整请求
23:51:50 请求结束
23:51:50 完整请求
23:51:50 请求结束
23:51:50 cookie ['user=hgkllhdde8h8skdc']
23:51:50 cookie ['user=hgkllhdde8h8skdc']
23:51:50 path and query /static {'file': 'weibo.js'} 
23:51:50 path and query /static {'file': 'gua.js'} 
23:51:50 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" value=${content}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:51:50 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:51:50 完整请求
23:51:50 请求结束
23:51:50 cookie ['user=hgkllhdde8h8skdc']
23:51:50 path and query /api/weibo/all {} 
23:51:50 kwargs,  {'weibo_id': 5} <class 'dict'>
23:51:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512920987,
    "comments": []
  }
]
23:52:25 完整请求
23:52:25 请求结束
23:52:25 cookie ['user=hgkllhdde8h8skdc']
23:52:25 path and query /weibo/index {} 
23:52:25 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:52:25 完整请求
23:52:25 完整请求
23:52:25 请求结束
23:52:25 请求结束
23:52:25 cookie ['user=hgkllhdde8h8skdc']
23:52:25 cookie ['user=hgkllhdde8h8skdc']
23:52:25 path and query /static {'file': 'weibo.js'} 
23:52:25 path and query /static {'file': 'gua.js'} 
23:52:25 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" value='${content}'>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:52:25 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:52:25 完整请求
23:52:25 请求结束
23:52:25 cookie ['user=hgkllhdde8h8skdc']
23:52:25 path and query /api/weibo/all {} 
23:52:25 kwargs,  {'weibo_id': 5} <class 'dict'>
23:52:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512920987,
    "comments": []
  }
]
23:53:59 完整请求
23:53:59 请求结束
23:53:59 cookie ['user=hgkllhdde8h8skdc']
23:53:59 path and query /weibo/index {} 
23:53:59 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:53:59 完整请求
23:53:59 完整请求
23:53:59 请求结束
23:53:59 请求结束
23:53:59 cookie ['user=hgkllhdde8h8skdc']
23:53:59 cookie ['user=hgkllhdde8h8skdc']
23:53:59 path and query /static {'file': 'weibo.js'} 
23:53:59 path and query /static {'file': 'gua.js'} 
23:53:59 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" value='12'>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:53:59 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
23:53:59 完整请求
23:53:59 请求结束
23:53:59 cookie ['user=hgkllhdde8h8skdc']
23:53:59 path and query /api/weibo/all {} 
23:53:59 kwargs,  {'weibo_id': 5} <class 'dict'>
23:53:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512920987,
    "comments": []
  }
]
23:54:04 完整请求
23:54:04 请求结束
23:54:04 cookie ['user=hgkllhdde8h8skdc']
23:54:04 path and query /api/weibo/update {} 
23:54:06 完整请求
23:54:06 请求结束
23:54:06 cookie ['user=hgkllhdde8h8skdc']
23:54:06 path and query /api/weibo/update {} {"id":"5","content":"12weqwe"}
23:54:06 kwargs,  {'id': 5} <class 'dict'>
23:54:06 debug 0
23:54:06 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921246,
  "comments": []
}
23:54:07 完整请求
23:54:07 请求结束
23:54:07 cookie ['user=hgkllhdde8h8skdc']
23:54:07 path and query /api/weibo/update {} {"id":"5","content":"12weqwe"}
23:54:07 kwargs,  {'id': 5} <class 'dict'>
23:54:07 debug 0
23:54:07 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921247,
  "comments": []
}
23:54:09 完整请求
23:54:09 请求结束
23:54:09 cookie ['user=hgkllhdde8h8skdc']
23:54:09 path and query /api/weibo/update {} {"id":"5","content":"12weqwesdad"}
23:54:09 kwargs,  {'id': 5} <class 'dict'>
23:54:09 debug 0
23:54:09 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921249,
  "comments": []
}
23:54:15 完整请求
23:54:15 请求结束
23:54:15 cookie ['user=hgkllhdde8h8skdc']
23:54:15 path and query /api/weibo/update {} 
23:54:16 完整请求
23:54:16 请求结束
23:54:16 cookie ['user=hgkllhdde8h8skdc']
23:54:16 path and query /api/weibo/update {} {"id":"5","content":"44444"}
23:54:16 kwargs,  {'id': 5} <class 'dict'>
23:54:16 debug 0
23:54:16 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921256,
  "comments": []
}
23:54:20 完整请求
23:54:20 请求结束
23:54:20 cookie ['user=hgkllhdde8h8skdc']
23:54:20 path and query /api/weibo/update {} {"id":"5","content":"12"}
23:54:20 kwargs,  {'id': 5} <class 'dict'>
23:54:20 debug 0
23:54:20 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921260,
  "comments": []
}
23:54:23 完整请求
23:54:23 请求结束
23:54:23 cookie ['user=hgkllhdde8h8skdc']
23:54:23 path and query /api/weibo/update {} 
23:54:23 完整请求
23:54:23 请求结束
23:54:23 cookie ['user=hgkllhdde8h8skdc']
23:54:23 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:23 kwargs,  {'id': 5} <class 'dict'>
23:54:23 debug 0
23:54:23 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921263,
  "comments": []
}
23:54:23 完整请求
23:54:23 请求结束
23:54:23 cookie ['user=hgkllhdde8h8skdc']
23:54:23 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:23 kwargs,  {'id': 5} <class 'dict'>
23:54:23 debug 0
23:54:23 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921263,
  "comments": []
}
23:54:24 完整请求
23:54:24 请求结束
23:54:24 cookie ['user=hgkllhdde8h8skdc']
23:54:24 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:24 kwargs,  {'id': 5} <class 'dict'>
23:54:24 debug 0
23:54:24 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921264,
  "comments": []
}
23:54:24 完整请求
23:54:24 请求结束
23:54:24 cookie ['user=hgkllhdde8h8skdc']
23:54:24 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:24 kwargs,  {'id': 5} <class 'dict'>
23:54:24 debug 0
23:54:24 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921264,
  "comments": []
}
23:54:24 完整请求
23:54:24 请求结束
23:54:24 cookie ['user=hgkllhdde8h8skdc']
23:54:24 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:24 kwargs,  {'id': 5} <class 'dict'>
23:54:24 debug 0
23:54:24 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921264,
  "comments": []
}
23:54:24 完整请求
23:54:24 请求结束
23:54:24 cookie ['user=hgkllhdde8h8skdc']
23:54:24 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:24 kwargs,  {'id': 5} <class 'dict'>
23:54:24 debug 0
23:54:24 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921264,
  "comments": []
}
23:54:24 完整请求
23:54:24 请求结束
23:54:24 cookie ['user=hgkllhdde8h8skdc']
23:54:24 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:24 kwargs,  {'id': 5} <class 'dict'>
23:54:24 debug 0
23:54:24 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921264,
  "comments": []
}
23:54:24 完整请求
23:54:24 请求结束
23:54:24 cookie ['user=hgkllhdde8h8skdc']
23:54:24 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:24 kwargs,  {'id': 5} <class 'dict'>
23:54:24 debug 0
23:54:24 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921264,
  "comments": []
}
23:54:25 完整请求
23:54:25 请求结束
23:54:25 cookie ['user=hgkllhdde8h8skdc']
23:54:25 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:25 kwargs,  {'id': 5} <class 'dict'>
23:54:25 debug 0
23:54:25 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921265,
  "comments": []
}
23:54:25 完整请求
23:54:25 请求结束
23:54:25 cookie ['user=hgkllhdde8h8skdc']
23:54:25 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:25 kwargs,  {'id': 5} <class 'dict'>
23:54:25 debug 0
23:54:25 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921265,
  "comments": []
}
23:54:25 完整请求
23:54:25 请求结束
23:54:25 cookie ['user=hgkllhdde8h8skdc']
23:54:25 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:25 kwargs,  {'id': 5} <class 'dict'>
23:54:25 debug 0
23:54:25 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921265,
  "comments": []
}
23:54:25 完整请求
23:54:25 请求结束
23:54:25 cookie ['user=hgkllhdde8h8skdc']
23:54:25 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:25 kwargs,  {'id': 5} <class 'dict'>
23:54:25 debug 0
23:54:25 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921265,
  "comments": []
}
23:54:25 完整请求
23:54:25 请求结束
23:54:25 cookie ['user=hgkllhdde8h8skdc']
23:54:25 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:25 kwargs,  {'id': 5} <class 'dict'>
23:54:25 debug 0
23:54:25 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921265,
  "comments": []
}
23:54:25 完整请求
23:54:25 请求结束
23:54:25 cookie ['user=hgkllhdde8h8skdc']
23:54:25 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:25 kwargs,  {'id': 5} <class 'dict'>
23:54:25 debug 0
23:54:25 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921265,
  "comments": []
}
23:54:25 完整请求
23:54:25 请求结束
23:54:25 cookie ['user=hgkllhdde8h8skdc']
23:54:25 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:25 kwargs,  {'id': 5} <class 'dict'>
23:54:25 debug 0
23:54:25 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921265,
  "comments": []
}
23:54:26 完整请求
23:54:26 请求结束
23:54:26 cookie ['user=hgkllhdde8h8skdc']
23:54:26 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:26 kwargs,  {'id': 5} <class 'dict'>
23:54:26 debug 0
23:54:26 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921266,
  "comments": []
}
23:54:26 完整请求
23:54:26 请求结束
23:54:26 cookie ['user=hgkllhdde8h8skdc']
23:54:26 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:26 kwargs,  {'id': 5} <class 'dict'>
23:54:26 debug 0
23:54:26 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921266,
  "comments": []
}
23:54:26 完整请求
23:54:26 请求结束
23:54:26 cookie ['user=hgkllhdde8h8skdc']
23:54:26 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:26 kwargs,  {'id': 5} <class 'dict'>
23:54:26 debug 0
23:54:26 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921266,
  "comments": []
}
23:54:26 完整请求
23:54:26 请求结束
23:54:26 cookie ['user=hgkllhdde8h8skdc']
23:54:26 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:26 kwargs,  {'id': 5} <class 'dict'>
23:54:26 debug 0
23:54:26 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921266,
  "comments": []
}
23:54:26 完整请求
23:54:26 请求结束
23:54:26 cookie ['user=hgkllhdde8h8skdc']
23:54:26 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:26 kwargs,  {'id': 5} <class 'dict'>
23:54:26 debug 0
23:54:26 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921266,
  "comments": []
}
23:54:26 完整请求
23:54:26 请求结束
23:54:26 cookie ['user=hgkllhdde8h8skdc']
23:54:26 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:26 kwargs,  {'id': 5} <class 'dict'>
23:54:26 debug 0
23:54:26 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921266,
  "comments": []
}
23:54:27 完整请求
23:54:27 请求结束
23:54:27 cookie ['user=hgkllhdde8h8skdc']
23:54:27 path and query /api/weibo/update {} 
23:54:27 完整请求
23:54:27 请求结束
23:54:27 cookie ['user=hgkllhdde8h8skdc']
23:54:27 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:27 kwargs,  {'id': 5} <class 'dict'>
23:54:27 debug 0
23:54:27 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921267,
  "comments": []
}
23:54:27 完整请求
23:54:27 请求结束
23:54:27 cookie ['user=hgkllhdde8h8skdc']
23:54:27 path and query /api/weibo/update {} {"id":"5","content":"12344"}
23:54:27 kwargs,  {'id': 5} <class 'dict'>
23:54:27 debug 0
23:54:27 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921267,
  "comments": []
}
23:54:32 完整请求
23:54:32 请求结束
23:54:32 cookie ['user=hgkllhdde8h8skdc']
23:54:32 path and query /api/weibo/update {} {"id":"5","content":"12344sdcsc"}
23:54:32 kwargs,  {'id': 5} <class 'dict'>
23:54:32 debug 0
23:54:32 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921272,
  "comments": []
}
23:54:32 完整请求
23:54:32 请求结束
23:54:32 cookie ['user=hgkllhdde8h8skdc']
23:54:32 path and query /api/weibo/update {} {"id":"5","content":"12344sdcsc"}
23:54:32 kwargs,  {'id': 5} <class 'dict'>
23:54:32 debug 0
23:54:32 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921272,
  "comments": []
}
23:54:35 完整请求
23:54:35 请求结束
23:54:35 cookie ['user=hgkllhdde8h8skdc']
23:54:35 path and query /api/weibo/update {} 
23:54:36 完整请求
23:54:36 请求结束
23:54:36 cookie ['user=hgkllhdde8h8skdc']
23:54:36 path and query /api/weibo/update {} {"id":"5","content":"12344sdcscujio"}
23:54:36 kwargs,  {'id': 5} <class 'dict'>
23:54:36 debug 0
23:54:36 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921276,
  "comments": []
}
23:54:43 完整请求
23:54:43 请求结束
23:54:43 cookie ['user=hgkllhdde8h8skdc']
23:54:43 path and query /api/weibo/update {} {"id":"5","content":"12344sdcscujiow"}
23:54:43 kwargs,  {'id': 5} <class 'dict'>
23:54:43 debug 0
23:54:43 kwargs,  {'weibo_id': 5} <class 'dict'>
23:54:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921283,
  "comments": []
}
00:00:55 完整请求
00:00:55 请求结束
00:00:55 cookie ['user=hgkllhdde8h8skdc']
00:00:55 path and query /weibo/index {} 
00:00:55 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
00:00:55 完整请求
00:00:55 请求结束
00:00:55 完整请求
00:00:55 cookie ['user=hgkllhdde8h8skdc']
00:00:55 请求结束
00:00:55 path and query /static {'file': 'gua.js'} 
00:00:55 cookie ['user=hgkllhdde8h8skdc']
00:00:55 path and query /static {'file': 'weibo.js'} 
00:00:55 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="{{ content }}">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" value='12'>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

00:00:55 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
00:00:55 完整请求
00:00:55 请求结束
00:00:55 cookie ['user=hgkllhdde8h8skdc']
00:00:55 path and query /api/weibo/all {} 
00:00:55 kwargs,  {'weibo_id': 5} <class 'dict'>
00:00:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512921283,
    "comments": []
  }
]
00:01:00 完整请求
00:01:00 请求结束
00:01:00 cookie ['user=hgkllhdde8h8skdc']
00:01:00 path and query /weibo/index {} 
00:01:00 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
00:01:00 完整请求
00:01:00 完整请求
00:01:00 请求结束
00:01:00 请求结束
00:01:00 cookie ['user=hgkllhdde8h8skdc']
00:01:00 path and query /static {'file': 'gua.js'} 
00:01:00 cookie ['user=hgkllhdde8h8skdc']
00:01:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
00:01:00 path and query /static {'file': 'weibo.js'} 
00:01:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="{{ content }}">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" value='12'>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

00:01:01 完整请求
00:01:01 请求结束
00:01:01 cookie ['user=hgkllhdde8h8skdc']
00:01:01 path and query /api/weibo/all {} 
00:01:01 kwargs,  {'weibo_id': 5} <class 'dict'>
00:01:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512921283,
    "comments": []
  }
]
00:01:04 完整请求
00:01:04 请求结束
00:01:04 cookie ['user=hgkllhdde8h8skdc']
00:01:04 path and query /api/weibo/update {} 
00:01:05 完整请求
00:01:05 请求结束
00:01:05 cookie ['user=hgkllhdde8h8skdc']
00:01:05 path and query /api/weibo/update {} {"id":"5","content":"12"}
00:01:05 kwargs,  {'id': 5} <class 'dict'>
00:01:05 debug 0
00:01:05 kwargs,  {'weibo_id': 5} <class 'dict'>
00:01:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921665,
  "comments": []
}
00:01:08 完整请求
00:01:08 请求结束
00:01:08 cookie ['user=hgkllhdde8h8skdc']
00:01:08 path and query /weibo/index {} 
00:01:08 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
00:01:08 完整请求
00:01:08 完整请求
00:01:08 请求结束
00:01:08 请求结束
00:01:08 cookie ['user=hgkllhdde8h8skdc']
00:01:08 cookie ['user=hgkllhdde8h8skdc']
00:01:08 path and query /static {'file': 'gua.js'} 
00:01:08 path and query /static {'file': 'weibo.js'} 
00:01:08 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
00:01:08 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="{{ content }}">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" value='12'>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

00:01:08 完整请求
00:01:08 请求结束
00:01:08 cookie ['user=hgkllhdde8h8skdc']
00:01:08 path and query /api/weibo/all {} 
00:01:08 kwargs,  {'weibo_id': 5} <class 'dict'>
00:01:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512921665,
    "comments": []
  }
]
00:01:26 完整请求
00:01:26 请求结束
00:01:26 cookie ['user=hgkllhdde8h8skdc']
00:01:26 path and query /weibo/index {} 
00:01:26 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
00:01:26 完整请求
00:01:26 完整请求
00:01:26 请求结束
00:01:26 请求结束
00:01:26 cookie ['user=hgkllhdde8h8skdc']
00:01:26 path and query /static {'file': 'weibo.js'} 
00:01:26 cookie ['user=hgkllhdde8h8skdc']
00:01:26 path and query /static {'file': 'gua.js'} 
00:01:26 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" value='{{ content }}'>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

00:01:26 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
00:01:26 完整请求
00:01:26 请求结束
00:01:26 cookie ['user=hgkllhdde8h8skdc']
00:01:26 path and query /api/weibo/all {} 
00:01:26 kwargs,  {'weibo_id': 5} <class 'dict'>
00:01:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512921665,
    "comments": []
  }
]
00:02:08 完整请求
00:02:08 请求结束
00:02:08 cookie ['user=hgkllhdde8h8skdc']
00:02:08 path and query /weibo/index {} 
00:02:08 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
00:02:08 完整请求
00:02:08 完整请求
00:02:08 请求结束
00:02:08 请求结束
00:02:08 cookie ['user=hgkllhdde8h8skdc']
00:02:08 path and query /static {'file': 'weibo.js'} 
00:02:08 cookie ['user=hgkllhdde8h8skdc']
00:02:08 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" value='{{ weibo.content }}'>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

00:02:08 path and query /static {'file': 'gua.js'} 
00:02:08 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
00:02:08 完整请求
00:02:08 请求结束
00:02:08 cookie ['user=hgkllhdde8h8skdc']
00:02:08 path and query /api/weibo/all {} 
00:02:08 kwargs,  {'weibo_id': 5} <class 'dict'>
00:02:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512921665,
    "comments": []
  }
]
00:02:15 完整请求
00:02:15 请求结束
00:02:15 cookie ['user=hgkllhdde8h8skdc']
00:02:15 path and query /weibo/index {} 
00:02:15 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
00:02:15 完整请求
00:02:15 请求结束
00:02:15 完整请求
00:02:15 cookie ['user=hgkllhdde8h8skdc']
00:02:15 path and query /static {'file': 'weibo.js'} 
00:02:15 请求结束
00:02:15 cookie ['user=hgkllhdde8h8skdc']
00:02:15 path and query /static {'file': 'gua.js'} 
00:02:15 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" value={{ weibo.content }}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

00:02:15 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
00:02:15 完整请求
00:02:15 请求结束
00:02:15 cookie ['user=hgkllhdde8h8skdc']
00:02:15 path and query /api/weibo/all {} 
00:02:15 kwargs,  {'weibo_id': 5} <class 'dict'>
00:02:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512921665,
    "comments": []
  }
]
00:02:31 完整请求
00:02:31 请求结束
00:02:31 cookie ['user=hgkllhdde8h8skdc']
00:02:31 path and query /weibo/index {} 
00:02:31 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
00:02:31 完整请求
00:02:31 完整请求
00:02:31 请求结束
00:02:31 请求结束
00:02:31 cookie ['user=hgkllhdde8h8skdc']
00:02:31 cookie ['user=hgkllhdde8h8skdc']
00:02:31 path and query /static {'file': 'gua.js'} 
00:02:31 path and query /static {'file': 'weibo.js'} 
00:02:31 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
00:02:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" value={{  }}>
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

00:02:31 完整请求
00:02:31 请求结束
00:02:31 cookie ['user=hgkllhdde8h8skdc']
00:02:31 path and query /api/weibo/all {} 
00:02:31 kwargs,  {'weibo_id': 5} <class 'dict'>
00:02:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512921665,
    "comments": []
  }
]
00:02:45 完整请求
00:02:45 请求结束
00:02:45 cookie ['user=hgkllhdde8h8skdc']
00:02:45 path and query /weibo/index {} 
00:02:45 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
00:02:45 完整请求
00:02:45 请求结束
00:02:45 cookie ['user=hgkllhdde8h8skdc']
00:02:45 完整请求
00:02:45 path and query /static {'file': 'gua.js'} 
00:02:45 请求结束
00:02:45 cookie ['user=hgkllhdde8h8skdc']
00:02:45 path and query /static {'file': 'weibo.js'} 
00:02:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
00:02:45 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" value="{{}}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

00:02:45 完整请求
00:02:45 请求结束
00:02:45 cookie ['user=hgkllhdde8h8skdc']
00:02:45 path and query /api/weibo/all {} 
00:02:45 kwargs,  {'weibo_id': 5} <class 'dict'>
00:02:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512921665,
    "comments": []
  }
]
00:04:57 完整请求
00:04:57 请求结束
00:04:57 cookie ['user=hgkllhdde8h8skdc']
00:04:57 path and query /weibo/index {} 
00:04:57 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
00:04:57 完整请求
00:04:57 完整请求
00:04:57 请求结束
00:04:57 请求结束
00:04:57 cookie ['user=hgkllhdde8h8skdc']
00:04:57 cookie ['user=hgkllhdde8h8skdc']
00:04:57 path and query /static {'file': 'gua.js'} 
00:04:57 path and query /static {'file': 'weibo.js'} 
00:04:57 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

00:04:57 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
00:04:57 完整请求
00:04:57 请求结束
00:04:57 cookie ['user=hgkllhdde8h8skdc']
00:04:57 path and query /api/weibo/all {} 
00:04:57 kwargs,  {'weibo_id': 5} <class 'dict'>
00:04:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512921665,
    "comments": []
  }
]
11:30:33 完整请求
11:30:33 请求结束
11:30:33 cookie ['user=hgkllhdde8h8skdc']
11:30:33 path and query /weibo/index {} 
11:30:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:30:35 完整请求
11:30:35 请求结束
11:30:35 cookie ['user=hgkllhdde8h8skdc']
11:30:35 path and query /weibo/index {} 
11:30:35 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:30:35 完整请求
11:30:35 完整请求
11:30:35 请求结束
11:30:35 请求结束
11:30:35 cookie ['user=hgkllhdde8h8skdc']
11:30:35 path and query /static {'file': 'weibo.js'} 
11:30:35 cookie ['user=hgkllhdde8h8skdc']
11:30:35 path and query /static {'file': 'gua.js'} 
11:30:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
11:30:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:30:35 完整请求
11:30:35 请求结束
11:30:35 cookie ['user=hgkllhdde8h8skdc']
11:30:35 path and query /api/weibo/all {} 
11:30:35 kwargs,  {'weibo_id': 5} <class 'dict'>
11:30:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512921665,
    "comments": []
  }
]
11:30:43 完整请求
11:30:43 请求结束
11:30:43 cookie ['user=hgkllhdde8h8skdc']
11:30:43 path and query /api/weibo/add {} 
11:30:44 完整请求
11:30:44 请求结束
11:30:44 cookie ['user=hgkllhdde8h8skdc']
11:30:44 path and query /api/weibo/add {} {"content":"sdfsd"}
11:30:44 kwargs,  {'weibo_id': 6} <class 'dict'>
11:30:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "content": "sdfsd",
  "ct": 1512963044,
  "ut": 1512963044,
  "comments": []
}
11:30:47 完整请求
11:30:47 请求结束
11:30:47 cookie ['user=hgkllhdde8h8skdc']
11:30:47 path and query /api/weibo/add {} 
11:30:48 完整请求
11:30:48 请求结束
11:30:48 cookie ['user=hgkllhdde8h8skdc']
11:30:48 path and query /api/weibo/add {} {"content":"sdfsde323333"}
11:30:48 kwargs,  {'weibo_id': 7} <class 'dict'>
11:30:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "sdfsde323333",
  "ct": 1512963048,
  "ut": 1512963048,
  "comments": []
}
11:30:52 完整请求
11:30:52 请求结束
11:30:52 cookie ['user=hgkllhdde8h8skdc']
11:30:52 path and query /api/weibo/add {} 
11:32:39 完整请求
11:32:39 请求结束
11:32:39 cookie ['user=hgkllhdde8h8skdc']
11:32:39 path and query /api/weibo/add {} {"content":"fewfwefwef"}
11:32:39 kwargs,  {'weibo_id': 8} <class 'dict'>
11:32:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "content": "fewfwefwef",
  "ct": 1512963159,
  "ut": 1512963159,
  "comments": []
}
11:32:40 完整请求
11:32:40 请求结束
11:32:40 cookie ['user=hgkllhdde8h8skdc']
11:32:40 path and query /api/weibo/add {} 
11:32:43 完整请求
11:32:43 请求结束
11:32:43 cookie ['user=hgkllhdde8h8skdc']
11:32:43 path and query /api/weibo/add {} {"content":"2"}
11:32:43 kwargs,  {'weibo_id': 9} <class 'dict'>
11:32:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "content": "2",
  "ct": 1512963163,
  "ut": 1512963163,
  "comments": []
}
11:32:46 完整请求
11:32:46 请求结束
11:32:46 cookie ['user=hgkllhdde8h8skdc']
11:32:46 path and query /api/weibo/add {} {"content":"444"}
11:32:46 kwargs,  {'weibo_id': 10} <class 'dict'>
11:32:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "content": "444",
  "ct": 1512963166,
  "ut": 1512963166,
  "comments": []
}
11:32:50 完整请求
11:32:50 请求结束
11:32:50 cookie ['user=hgkllhdde8h8skdc']
11:32:50 path and query /api/weibo/add {} 
11:32:51 完整请求
11:32:51 请求结束
11:32:51 cookie ['user=hgkllhdde8h8skdc']
11:32:51 path and query /api/weibo/add {} {"content":"444www"}
11:32:51 kwargs,  {'weibo_id': 11} <class 'dict'>
11:32:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "content": "444www",
  "ct": 1512963171,
  "ut": 1512963171,
  "comments": []
}
11:33:49 完整请求
11:33:49 请求结束
11:33:49 cookie ['user=hgkllhdde8h8skdc']
11:33:49 path and query /weibo/index {} 
11:33:49 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:33:49 完整请求
11:33:49 完整请求
11:33:49 请求结束
11:33:49 请求结束
11:33:49 cookie ['user=hgkllhdde8h8skdc']
11:33:49 cookie ['user=hgkllhdde8h8skdc']
11:33:49 path and query /static {'file': 'gua.js'} 
11:33:49 path and query /static {'file': 'weibo.js'} 
11:33:49 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
11:33:49 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var
    insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:33:49 完整请求
11:33:49 请求结束
11:33:49 cookie ['user=hgkllhdde8h8skdc']
11:33:49 path and query /api/weibo/all {} 
11:33:49 kwargs,  {'weibo_id': 5} <class 'dict'>
11:33:49 kwargs,  {'weibo_id': 6} <class 'dict'>
11:33:49 kwargs,  {'weibo_id': 7} <class 'dict'>
11:33:49 kwargs,  {'weibo_id': 8} <class 'dict'>
11:33:49 kwargs,  {'weibo_id': 9} <class 'dict'>
11:33:49 kwargs,  {'weibo_id': 10} <class 'dict'>
11:33:49 kwargs,  {'weibo_id': 11} <class 'dict'>
11:33:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512921665,
    "comments": []
  },
  {
    "id": 6,
    "content": "sdfsd",
    "ct": 1512963044,
    "ut": 1512963044,
    "comments": []
  },
  {
    "id": 7,
    "content": "sdfsde323333",
    "ct": 1512963048,
    "ut": 1512963048,
    "comments": []
  },
  {
    "id": 8,
    "content": "fewfwefwef",
    "ct": 1512963159,
    "ut": 1512963159,
    "comments": []
  },
  {
    "id": 9,
    "content": "2",
    "ct": 1512963163,
    "ut": 1512963163,
    "comments": []
  },
  {
    "id": 10,
    "content": "444",
    "ct": 1512963166,
    "ut": 1512963166,
    "comments": []
  },
  {
    "id": 11,
    "content": "444www",
    "ct": 1512963171,
    "ut": 1512963171,
    "comments": []
  }
]
11:33:51 完整请求
11:33:51 请求结束
11:33:51 cookie ['user=hgkllhdde8h8skdc']
11:33:51 path and query /api/weibo/add {} 
11:33:53 完整请求
11:33:53 请求结束
11:33:53 cookie ['user=hgkllhdde8h8skdc']
11:33:53 path and query /api/weibo/add {} {"content":"wew"}
11:33:53 kwargs,  {'weibo_id': 12} <class 'dict'>
11:33:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "content": "wew",
  "ct": 1512963233,
  "ut": 1512963233,
  "comments": []
}
11:34:13 完整请求
11:34:13 请求结束
11:34:13 cookie ['user=hgkllhdde8h8skdc']
11:34:13 path and query /weibo/index {} 
11:34:13 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:34:13 完整请求
11:34:13 完整请求
11:34:13 请求结束
11:34:13 请求结束
11:34:13 cookie ['user=hgkllhdde8h8skdc']
11:34:13 cookie ['user=hgkllhdde8h8skdc']
11:34:13 path and query /static {'file': 'gua.js'} 
11:34:13 path and query /static {'file': 'weibo.js'} 
11:34:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
11:34:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var
    insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:34:13 完整请求
11:34:13 请求结束
11:34:13 cookie ['user=hgkllhdde8h8skdc']
11:34:13 path and query /api/weibo/all {} 
11:34:13 kwargs,  {'weibo_id': 5} <class 'dict'>
11:34:13 kwargs,  {'weibo_id': 6} <class 'dict'>
11:34:13 kwargs,  {'weibo_id': 7} <class 'dict'>
11:34:13 kwargs,  {'weibo_id': 8} <class 'dict'>
11:34:13 kwargs,  {'weibo_id': 9} <class 'dict'>
11:34:13 kwargs,  {'weibo_id': 10} <class 'dict'>
11:34:13 kwargs,  {'weibo_id': 11} <class 'dict'>
11:34:13 kwargs,  {'weibo_id': 12} <class 'dict'>
11:34:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512921665,
    "comments": []
  },
  {
    "id": 6,
    "content": "sdfsd",
    "ct": 1512963044,
    "ut": 1512963044,
    "comments": []
  },
  {
    "id": 7,
    "content": "sdfsde323333",
    "ct": 1512963048,
    "ut": 1512963048,
    "comments": []
  },
  {
    "id": 8,
    "content": "fewfwefwef",
    "ct": 1512963159,
    "ut": 1512963159,
    "comments": []
  },
  {
    "id": 9,
    "content": "2",
    "ct": 1512963163,
    "ut": 1512963163,
    "comments": []
  },
  {
    "id": 10,
    "content": "444",
    "ct": 1512963166,
    "ut": 1512963166,
    "comments": []
  },
  {
    "id": 11,
    "content": "444www",
    "ct": 1512963171,
    "ut": 1512963171,
    "comments": []
  },
  {
    "id": 12,
    "content": "wew",
    "ct": 1512963233,
    "ut": 1512963233,
    "comments": []
  }
]
11:35:55 完整请求
11:35:55 请求结束
11:35:55 cookie ['user=hgkllhdde8h8skdc']
11:35:55 path and query /weibo/index {} 
11:35:55 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:35:56 完整请求
11:35:56 完整请求
11:35:56 请求结束
11:35:56 请求结束
11:35:56 cookie ['user=hgkllhdde8h8skdc']
11:35:56 path and query /static {'file': 'gua.js'} 
11:35:56 cookie ['user=hgkllhdde8h8skdc']
11:35:56 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
11:35:56 path and query /static {'file': 'weibo.js'} 
11:35:56 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:35:56 完整请求
11:35:56 请求结束
11:35:56 cookie ['user=hgkllhdde8h8skdc']
11:35:56 path and query /api/weibo/all {} 
11:35:56 kwargs,  {'weibo_id': 5} <class 'dict'>
11:35:56 kwargs,  {'weibo_id': 6} <class 'dict'>
11:35:56 kwargs,  {'weibo_id': 7} <class 'dict'>
11:35:56 kwargs,  {'weibo_id': 8} <class 'dict'>
11:35:56 kwargs,  {'weibo_id': 9} <class 'dict'>
11:35:56 kwargs,  {'weibo_id': 10} <class 'dict'>
11:35:56 kwargs,  {'weibo_id': 11} <class 'dict'>
11:35:56 kwargs,  {'weibo_id': 12} <class 'dict'>
11:35:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 5,
    "content": "sad",
    "ct": 1512915115,
    "ut": 1512921665,
    "comments": []
  },
  {
    "id": 6,
    "content": "sdfsd",
    "ct": 1512963044,
    "ut": 1512963044,
    "comments": []
  },
  {
    "id": 7,
    "content": "sdfsde323333",
    "ct": 1512963048,
    "ut": 1512963048,
    "comments": []
  },
  {
    "id": 8,
    "content": "fewfwefwef",
    "ct": 1512963159,
    "ut": 1512963159,
    "comments": []
  },
  {
    "id": 9,
    "content": "2",
    "ct": 1512963163,
    "ut": 1512963163,
    "comments": []
  },
  {
    "id": 10,
    "content": "444",
    "ct": 1512963166,
    "ut": 1512963166,
    "comments": []
  },
  {
    "id": 11,
    "content": "444www",
    "ct": 1512963171,
    "ut": 1512963171,
    "comments": []
  },
  {
    "id": 12,
    "content": "wew",
    "ct": 1512963233,
    "ut": 1512963233,
    "comments": []
  }
]
11:35:58 完整请求
11:35:58 请求结束
11:35:58 cookie ['user=hgkllhdde8h8skdc']
11:35:58 path and query /api/weibo/add {} 
11:35:59 完整请求
11:35:59 请求结束
11:35:59 cookie ['user=hgkllhdde8h8skdc']
11:35:59 path and query /api/weibo/add {} {"content":"qwew"}
11:35:59 kwargs,  {'weibo_id': 13} <class 'dict'>
11:35:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "content": "qwew",
  "ct": 1512963359,
  "ut": 1512963359,
  "comments": []
}
11:35:59 完整请求
11:35:59 请求结束
11:35:59 cookie ['user=hgkllhdde8h8skdc']
11:35:59 path and query /api/weibo/add {} {"content":"qwew"}
11:35:59 kwargs,  {'weibo_id': 14} <class 'dict'>
11:35:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 14,
  "content": "qwew",
  "ct": 1512963359,
  "ut": 1512963359,
  "comments": []
}
11:36:01 完整请求
11:36:01 请求结束
11:36:01 cookie ['user=hgkllhdde8h8skdc']
11:36:01 path and query /api/weibo/add {} {"content":"qwew"}
11:36:01 kwargs,  {'weibo_id': 15} <class 'dict'>
11:36:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 15,
  "content": "qwew",
  "ct": 1512963361,
  "ut": 1512963361,
  "comments": []
}
11:36:04 完整请求
11:36:04 请求结束
11:36:04 cookie ['user=hgkllhdde8h8skdc']
11:36:04 path and query /api/weibo/delete {'id': '6'} 
11:36:04 kwargs,  {'weibo_id': 6} <class 'dict'>
11:36:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "content": "sdfsd",
  "ct": 1512963044,
  "ut": 1512963044,
  "comments": []
}
11:36:06 完整请求
11:36:06 请求结束
11:36:06 cookie ['user=hgkllhdde8h8skdc']
11:36:06 path and query /api/weibo/delete {'id': '7'} 
11:36:06 kwargs,  {'weibo_id': 7} <class 'dict'>
11:36:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "sdfsde323333",
  "ct": 1512963048,
  "ut": 1512963048,
  "comments": []
}
11:36:06 完整请求
11:36:06 请求结束
11:36:06 cookie ['user=hgkllhdde8h8skdc']
11:36:06 path and query /api/weibo/delete {'id': '8'} 
11:36:06 kwargs,  {'weibo_id': 8} <class 'dict'>
11:36:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "content": "fewfwefwef",
  "ct": 1512963159,
  "ut": 1512963159,
  "comments": []
}
11:36:07 完整请求
11:36:07 请求结束
11:36:07 cookie ['user=hgkllhdde8h8skdc']
11:36:07 path and query /api/weibo/delete {'id': '5'} 
11:36:07 kwargs,  {'weibo_id': 5} <class 'dict'>
11:36:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "sad",
  "ct": 1512915115,
  "ut": 1512921665,
  "comments": []
}
11:36:08 完整请求
11:36:08 请求结束
11:36:08 cookie ['user=hgkllhdde8h8skdc']
11:36:08 path and query /api/weibo/delete {'id': '10'} 
11:36:08 kwargs,  {'weibo_id': 10} <class 'dict'>
11:36:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "content": "444",
  "ct": 1512963166,
  "ut": 1512963166,
  "comments": []
}
11:36:09 完整请求
11:36:09 请求结束
11:36:09 cookie ['user=hgkllhdde8h8skdc']
11:36:09 path and query /api/weibo/delete {'id': '12'} 
11:36:09 kwargs,  {'weibo_id': 12} <class 'dict'>
11:36:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "content": "wew",
  "ct": 1512963233,
  "ut": 1512963233,
  "comments": []
}
11:36:09 完整请求
11:36:09 请求结束
11:36:09 cookie ['user=hgkllhdde8h8skdc']
11:36:09 path and query /api/weibo/delete {'id': '13'} 
11:36:09 kwargs,  {'weibo_id': 13} <class 'dict'>
11:36:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "content": "qwew",
  "ct": 1512963359,
  "ut": 1512963359,
  "comments": []
}
11:36:10 完整请求
11:36:10 请求结束
11:36:10 cookie ['user=hgkllhdde8h8skdc']
11:36:10 path and query /api/weibo/delete {'id': '14'} 
11:36:10 kwargs,  {'weibo_id': 14} <class 'dict'>
11:36:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 14,
  "content": "qwew",
  "ct": 1512963359,
  "ut": 1512963359,
  "comments": []
}
11:36:10 完整请求
11:36:10 请求结束
11:36:10 cookie ['user=hgkllhdde8h8skdc']
11:36:10 path and query /api/weibo/delete {'id': '15'} 
11:36:10 kwargs,  {'weibo_id': 15} <class 'dict'>
11:36:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 15,
  "content": "qwew",
  "ct": 1512963361,
  "ut": 1512963361,
  "comments": []
}
11:36:11 完整请求
11:36:11 请求结束
11:36:11 cookie ['user=hgkllhdde8h8skdc']
11:36:11 path and query /api/weibo/delete {'id': '11'} 
11:36:11 kwargs,  {'weibo_id': 11} <class 'dict'>
11:36:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "content": "444www",
  "ct": 1512963171,
  "ut": 1512963171,
  "comments": []
}
11:36:13 完整请求
11:36:13 请求结束
11:36:13 cookie ['user=hgkllhdde8h8skdc']
11:36:13 path and query /api/weibo/delete {'id': '9'} 
11:36:13 kwargs,  {'weibo_id': 9} <class 'dict'>
11:36:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "content": "2",
  "ct": 1512963163,
  "ut": 1512963163,
  "comments": []
}
11:36:14 完整请求
11:36:14 请求结束
11:36:14 cookie ['user=hgkllhdde8h8skdc']
11:36:14 path and query /api/weibo/add {} 
11:36:15 完整请求
11:36:15 请求结束
11:36:15 cookie ['user=hgkllhdde8h8skdc']
11:36:15 path and query /api/weibo/add {} {"content":"qwew"}
11:36:15 kwargs,  {'weibo_id': 1} <class 'dict'>
11:36:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "qwew",
  "ct": 1512963375,
  "ut": 1512963375,
  "comments": [
    {
      "id": 1,
      "content": "楼主说得对",
      "weibo_id": 1,
      "user_id": 2
    },
    {
      "id": 2,
      "content": "lbvu is right",
      "weibo_id": 1,
      "user_id": 1
    }
  ]
}
11:36:26 完整请求
11:36:26 请求结束
11:36:26 cookie ['user=hgkllhdde8h8skdc']
11:36:26 path and query /api/weibo/add {} 
11:36:26 完整请求
11:36:26 请求结束
11:36:26 cookie ['user=hgkllhdde8h8skdc']
11:36:26 path and query /api/weibo/add {} {"content":"qwew3333"}
11:36:26 kwargs,  {'weibo_id': 2} <class 'dict'>
11:36:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "content": "qwew3333",
  "ct": 1512963386,
  "ut": 1512963386,
  "comments": [
    {
      "id": 3,
      "content": "hello",
      "weibo_id": 2,
      "user_id": 1
    },
    {
      "id": 4,
      "content": "123",
      "weibo_id": 2,
      "user_id": 1
    },
    {
      "id": 5,
      "content": "asdf",
      "weibo_id": 2,
      "user_id": 1
    },
    {
      "id": 7,
      "content": "说得好",
      "weibo_id": 2,
      "user_id": 2
    },
    {
      "id": 8,
      "content": "说得好",
      "weibo_id": 2,
      "user_id": 2
    }
  ]
}
11:36:35 完整请求
11:36:35 请求结束
11:36:35 cookie ['user=hgkllhdde8h8skdc']
11:36:35 path and query /api/weibo/add {} 
11:36:36 完整请求
11:36:36 请求结束
11:36:36 cookie ['user=hgkllhdde8h8skdc']
11:36:36 path and query /api/weibo/add {} {"content":"qwew3333233"}
11:36:36 kwargs,  {'weibo_id': 3} <class 'dict'>
11:36:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "qwew3333233",
  "ct": 1512963396,
  "ut": 1512963396,
  "comments": [
    {
      "id": 6,
      "content": "123",
      "weibo_id": 3,
      "user_id": 1
    }
  ]
}
11:36:40 完整请求
11:36:40 请求结束
11:36:40 cookie ['user=hgkllhdde8h8skdc']
11:36:40 path and query /api/weibo/add {} {"content":"q"}
11:36:40 kwargs,  {'weibo_id': 4} <class 'dict'>
11:36:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "content": "q",
  "ct": 1512963400,
  "ut": 1512963400,
  "comments": []
}
11:36:42 完整请求
11:36:42 请求结束
11:36:42 cookie ['user=hgkllhdde8h8skdc']
11:36:42 path and query /api/weibo/add {} {"content":"qf"}
11:36:42 kwargs,  {'weibo_id': 5} <class 'dict'>
11:36:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "qf",
  "ct": 1512963402,
  "ut": 1512963402,
  "comments": []
}
11:36:44 完整请求
11:36:44 请求结束
11:36:44 cookie ['user=hgkllhdde8h8skdc']
11:36:44 path and query /api/weibo/add {} {"content":"qffv"}
11:36:44 kwargs,  {'weibo_id': 6} <class 'dict'>
11:36:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "content": "qffv",
  "ct": 1512963404,
  "ut": 1512963404,
  "comments": []
}
11:36:46 完整请求
11:36:46 请求结束
11:36:46 cookie ['user=hgkllhdde8h8skdc']
11:36:46 path and query /api/weibo/add {} {"content":"qffvdd"}
11:36:46 kwargs,  {'weibo_id': 7} <class 'dict'>
11:36:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "qffvdd",
  "ct": 1512963406,
  "ut": 1512963406,
  "comments": []
}
11:36:49 完整请求
11:36:49 请求结束
11:36:49 cookie ['user=hgkllhdde8h8skdc']
11:36:49 path and query /api/weibo/add {} {"content":"233qffvdd"}
11:36:49 kwargs,  {'weibo_id': 8} <class 'dict'>
11:36:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "content": "233qffvdd",
  "ct": 1512963409,
  "ut": 1512963409,
  "comments": []
}
11:44:03 完整请求
11:44:03 请求结束
11:44:03 cookie ['user=hgkllhdde8h8skdc']
11:44:03 path and query /weibo/index {} 
11:44:03 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:44:03 完整请求
11:44:03 完整请求
11:44:03 请求结束
11:44:03 请求结束
11:44:03 cookie ['user=hgkllhdde8h8skdc']
11:44:03 cookie ['user=hgkllhdde8h8skdc']
11:44:03 path and query /static {'file': 'gua.js'} 
11:44:03 path and query /static {'file': 'weibo.js'} 
11:44:03 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
11:44:03 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:44:03 完整请求
11:44:03 请求结束
11:44:03 cookie ['user=hgkllhdde8h8skdc']
11:44:03 path and query /api/weibo/all {} 
11:44:03 kwargs,  {'weibo_id': 1} <class 'dict'>
11:44:03 kwargs,  {'weibo_id': 2} <class 'dict'>
11:44:03 kwargs,  {'weibo_id': 3} <class 'dict'>
11:44:03 kwargs,  {'weibo_id': 4} <class 'dict'>
11:44:03 kwargs,  {'weibo_id': 5} <class 'dict'>
11:44:03 kwargs,  {'weibo_id': 6} <class 'dict'>
11:44:03 kwargs,  {'weibo_id': 7} <class 'dict'>
11:44:03 kwargs,  {'weibo_id': 8} <class 'dict'>
11:44:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "qwew",
    "ct": 1512963375,
    "ut": 1512963375,
    "comments": []
  },
  {
    "id": 2,
    "content": "qwew3333",
    "ct": 1512963386,
    "ut": 1512963386,
    "comments": []
  },
  {
    "id": 3,
    "content": "qwew3333233",
    "ct": 1512963396,
    "ut": 1512963396,
    "comments": []
  },
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 5,
    "content": "qf",
    "ct": 1512963402,
    "ut": 1512963402,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  }
]
11:44:11 完整请求
11:44:11 请求结束
11:44:11 cookie ['user=hgkllhdde8h8skdc']
11:44:11 path and query /api/weibo/add {} {"content":""}
11:44:11 kwargs,  {'weibo_id': 9} <class 'dict'>
11:44:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "content": "",
  "ct": 1512963851,
  "ut": 1512963851,
  "comments": []
}
11:44:16 完整请求
11:44:16 请求结束
11:44:16 cookie ['user=hgkllhdde8h8skdc']
11:44:16 path and query /api/weibo/add {} {"content":""}
11:44:16 kwargs,  {'weibo_id': 10} <class 'dict'>
11:44:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "content": "",
  "ct": 1512963856,
  "ut": 1512963856,
  "comments": []
}
11:44:19 完整请求
11:44:19 请求结束
11:44:19 cookie ['user=hgkllhdde8h8skdc']
11:44:19 path and query /api/weibo/add {} {"content":""}
11:44:19 kwargs,  {'weibo_id': 11} <class 'dict'>
11:44:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "content": "",
  "ct": 1512963859,
  "ut": 1512963859,
  "comments": []
}
11:44:27 完整请求
11:44:27 请求结束
11:44:27 cookie ['user=hgkllhdde8h8skdc']
11:44:27 path and query /api/weibo/delete {'id': '1'} 
11:44:27 kwargs,  {'weibo_id': 1} <class 'dict'>
11:44:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "qwew",
  "ct": 1512963375,
  "ut": 1512963375,
  "comments": []
}
11:44:28 完整请求
11:44:28 请求结束
11:44:28 cookie ['user=hgkllhdde8h8skdc']
11:44:28 path and query /api/weibo/delete {'id': '2'} 
11:44:28 kwargs,  {'weibo_id': 2} <class 'dict'>
11:44:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "content": "qwew3333",
  "ct": 1512963386,
  "ut": 1512963386,
  "comments": []
}
11:44:29 完整请求
11:44:29 请求结束
11:44:29 cookie ['user=hgkllhdde8h8skdc']
11:44:29 path and query /api/weibo/delete {'id': '3'} 
11:44:29 kwargs,  {'weibo_id': 3} <class 'dict'>
11:44:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "qwew3333233",
  "ct": 1512963396,
  "ut": 1512963396,
  "comments": []
}
11:44:29 完整请求
11:44:29 请求结束
11:44:29 cookie ['user=hgkllhdde8h8skdc']
11:44:29 path and query /api/weibo/delete {'id': '5'} 
11:44:29 kwargs,  {'weibo_id': 5} <class 'dict'>
11:44:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "qf",
  "ct": 1512963402,
  "ut": 1512963402,
  "comments": []
}
11:44:31 完整请求
11:44:31 请求结束
11:44:31 cookie ['user=hgkllhdde8h8skdc']
11:44:31 path and query /api/weibo/delete {'id': '10'} 
11:44:31 kwargs,  {'weibo_id': 10} <class 'dict'>
11:44:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "content": "",
  "ct": 1512963856,
  "ut": 1512963856,
  "comments": []
}
11:44:32 完整请求
11:44:32 请求结束
11:44:32 cookie ['user=hgkllhdde8h8skdc']
11:44:32 path and query /api/weibo/delete {'id': '9'} 
11:44:32 kwargs,  {'weibo_id': 9} <class 'dict'>
11:44:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "content": "",
  "ct": 1512963851,
  "ut": 1512963851,
  "comments": []
}
11:45:19 完整请求
11:45:19 请求结束
11:45:19 cookie ['user=hgkllhdde8h8skdc']
11:45:19 path and query /weibo/index {} 
11:45:19 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input class='comment-content' name="content" value="">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:45:19 完整请求
11:45:19 请求结束
11:45:19 完整请求
11:45:19 请求结束
11:45:19 cookie ['user=hgkllhdde8h8skdc']
11:45:19 cookie ['user=hgkllhdde8h8skdc']
11:45:19 path and query /static {'file': 'weibo.js'} 
11:45:19 path and query /static {'file': 'gua.js'} 
11:45:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:45:19 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
11:45:19 完整请求
11:45:19 请求结束
11:45:19 cookie ['user=hgkllhdde8h8skdc']
11:45:19 path and query /api/weibo/all {} 
11:45:19 kwargs,  {'weibo_id': 4} <class 'dict'>
11:45:19 kwargs,  {'weibo_id': 6} <class 'dict'>
11:45:19 kwargs,  {'weibo_id': 7} <class 'dict'>
11:45:19 kwargs,  {'weibo_id': 8} <class 'dict'>
11:45:19 kwargs,  {'weibo_id': 11} <class 'dict'>
11:45:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
11:45:27 完整请求
11:45:27 请求结束
11:45:27 cookie ['user=hgkllhdde8h8skdc']
11:45:27 path and query /api/weibo/add {} 
11:45:28 完整请求
11:45:28 请求结束
11:45:28 cookie ['user=hgkllhdde8h8skdc']
11:45:28 path and query /api/weibo/add {} {"content":""}
11:45:28 kwargs,  {'weibo_id': 12} <class 'dict'>
11:45:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "content": "",
  "ct": 1512963928,
  "ut": 1512963928,
  "comments": []
}
11:45:30 完整请求
11:45:30 请求结束
11:45:30 cookie ['user=hgkllhdde8h8skdc']
11:45:30 path and query /api/weibo/delete {'id': '12'} 
11:45:30 kwargs,  {'weibo_id': 12} <class 'dict'>
11:45:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "content": "",
  "ct": 1512963928,
  "ut": 1512963928,
  "comments": []
}
11:46:50 完整请求
11:46:50 请求结束
11:46:50 cookie ['user=hgkllhdde8h8skdc']
11:46:50 path and query /api/weibo/add {} 
11:46:50 完整请求
11:46:50 请求结束
11:46:50 cookie ['user=hgkllhdde8h8skdc']
11:46:50 path and query /api/weibo/add {} {"content":""}
11:46:50 kwargs,  {'weibo_id': 12} <class 'dict'>
11:46:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "content": "",
  "ct": 1512964010,
  "ut": 1512964010,
  "comments": []
}
11:46:52 完整请求
11:46:52 请求结束
11:46:52 cookie ['user=hgkllhdde8h8skdc']
11:46:52 path and query /api/weibo/add {} {"content":""}
11:46:52 kwargs,  {'weibo_id': 13} <class 'dict'>
11:46:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "content": "",
  "ct": 1512964012,
  "ut": 1512964012,
  "comments": []
}
11:46:52 完整请求
11:46:52 请求结束
11:46:52 cookie ['user=hgkllhdde8h8skdc']
11:46:52 path and query /api/weibo/add {} 
11:46:53 完整请求
11:46:53 请求结束
11:46:53 cookie ['user=hgkllhdde8h8skdc']
11:46:53 path and query /api/weibo/delete {'id': '13'} 
11:46:53 kwargs,  {'weibo_id': 13} <class 'dict'>
11:46:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "content": "",
  "ct": 1512964012,
  "ut": 1512964012,
  "comments": []
}
11:46:54 完整请求
11:46:54 请求结束
11:46:54 cookie ['user=hgkllhdde8h8skdc']
11:46:54 path and query /api/weibo/delete {'id': '12'} 
11:46:54 kwargs,  {'weibo_id': 12} <class 'dict'>
11:46:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "content": "",
  "ct": 1512964010,
  "ut": 1512964010,
  "comments": []
}
11:51:51 完整请求
11:51:51 请求结束
11:51:51 cookie ['user=hgkllhdde8h8skdc']
11:51:51 path and query /weibo/index {} 
11:51:51 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input class='comment-content' name="content" value="">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:51:51 完整请求
11:51:51 完整请求
11:51:51 请求结束
11:51:51 请求结束
11:51:51 cookie ['user=hgkllhdde8h8skdc']
11:51:51 cookie ['user=hgkllhdde8h8skdc']
11:51:51 path and query /static {'file': 'gua.js'} 
11:51:51 path and query /static {'file': 'weibo.js'} 
11:51:51 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
11:51:51 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:51:52 完整请求
11:51:52 请求结束
11:51:52 cookie ['user=hgkllhdde8h8skdc']
11:51:52 path and query /weibo/index {} 
11:51:52 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input class='comment-content' name="content" value="">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:51:52 完整请求
11:51:52 完整请求
11:51:52 请求结束
11:51:52 请求结束
11:51:52 cookie ['user=hgkllhdde8h8skdc']
11:51:52 cookie ['user=hgkllhdde8h8skdc']
11:51:52 path and query /static {'file': 'gua.js'} 
11:51:52 path and query /static {'file': 'weibo.js'} 
11:51:52 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
11:51:52 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:52:02 完整请求
11:52:02 请求结束
11:52:02 cookie ['user=hgkllhdde8h8skdc']
11:52:02 path and query /weibo/index {} 
11:52:02 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input class='comment-content' name="content" value="">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:52:02 完整请求
11:52:02 完整请求
11:52:02 请求结束
11:52:02 cookie ['user=hgkllhdde8h8skdc']
11:52:02 请求结束
11:52:02 path and query /static {'file': 'weibo.js'} 
11:52:02 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:52:02 cookie ['user=hgkllhdde8h8skdc']
11:52:02 path and query /static {'file': 'gua.js'} 
11:52:02 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
11:52:02 完整请求
11:52:02 请求结束
11:52:02 cookie ['user=hgkllhdde8h8skdc']
11:52:02 path and query /api/weibo/all {} 
11:52:02 kwargs,  {'weibo_id': 4} <class 'dict'>
11:52:02 kwargs,  {'weibo_id': 6} <class 'dict'>
11:52:02 kwargs,  {'weibo_id': 7} <class 'dict'>
11:52:02 kwargs,  {'weibo_id': 8} <class 'dict'>
11:52:02 kwargs,  {'weibo_id': 11} <class 'dict'>
11:52:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
11:52:33 完整请求
11:52:33 请求结束
11:52:33 cookie ['user=hgkllhdde8h8skdc']
11:52:33 path and query /weibo/index {} 
11:52:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input class='comment-content' name="content" value="">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:52:33 完整请求
11:52:33 完整请求
11:52:33 请求结束
11:52:33 请求结束
11:52:33 cookie ['user=hgkllhdde8h8skdc']
11:52:33 path and query /static {'file': 'gua.js'} 
11:52:33 cookie ['user=hgkllhdde8h8skdc']
11:52:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
11:52:33 path and query /static {'file': 'weibo.js'} 
11:52:33 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-form')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:52:33 完整请求
11:52:33 请求结束
11:52:33 cookie ['user=hgkllhdde8h8skdc']
11:52:33 path and query /api/weibo/all {} 
11:52:33 kwargs,  {'weibo_id': 4} <class 'dict'>
11:52:33 kwargs,  {'weibo_id': 6} <class 'dict'>
11:52:33 kwargs,  {'weibo_id': 7} <class 'dict'>
11:52:33 kwargs,  {'weibo_id': 8} <class 'dict'>
11:52:33 kwargs,  {'weibo_id': 11} <class 'dict'>
11:52:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
11:52:38 完整请求
11:52:38 请求结束
11:52:38 cookie ['user=hgkllhdde8h8skdc']
11:52:38 path and query /api/comment/add {} 
11:52:38 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
11:52:40 完整请求
11:52:40 请求结束
11:52:40 cookie ['user=hgkllhdde8h8skdc']
11:52:40 path and query /api/comment/add {} {"content":""}
11:52:40 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
11:52:41 完整请求
11:52:41 请求结束
11:52:41 cookie ['user=hgkllhdde8h8skdc']
11:52:41 path and query /api/comment/add {} 
11:52:41 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
11:52:42 完整请求
11:52:42 请求结束
11:52:42 cookie ['user=hgkllhdde8h8skdc']
11:52:42 path and query /api/comment/add {} {"content":""}
11:52:42 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
11:52:43 完整请求
11:52:43 请求结束
11:52:43 cookie ['user=hgkllhdde8h8skdc']
11:52:43 path and query /api/comment/add {} {"content":""}
11:52:43 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
11:54:25 完整请求
11:54:25 请求结束
11:54:25 cookie ['user=hgkllhdde8h8skdc']
11:54:25 path and query /weibo/index {} 
11:54:25 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input class='comment-content' name="content" value="">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:54:25 完整请求
11:54:25 完整请求
11:54:25 请求结束
11:54:25 请求结束
11:54:25 cookie ['user=hgkllhdde8h8skdc']
11:54:25 cookie ['user=hgkllhdde8h8skdc']
11:54:25 path and query /static {'file': 'gua.js'} 
11:54:25 path and query /static {'file': 'weibo.js'} 
11:54:25 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
11:54:25 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:54:25 完整请求
11:54:25 请求结束
11:54:25 cookie ['user=hgkllhdde8h8skdc']
11:54:25 path and query /api/weibo/all {} 
11:54:25 kwargs,  {'weibo_id': 4} <class 'dict'>
11:54:25 kwargs,  {'weibo_id': 6} <class 'dict'>
11:54:25 kwargs,  {'weibo_id': 7} <class 'dict'>
11:54:25 kwargs,  {'weibo_id': 8} <class 'dict'>
11:54:25 kwargs,  {'weibo_id': 11} <class 'dict'>
11:54:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
11:54:36 完整请求
11:54:36 请求结束
11:54:36 cookie ['user=hgkllhdde8h8skdc']
11:54:36 path and query /api/comment/add {} {"content":""}
11:54:36 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
11:56:20 完整请求
11:56:20 请求结束
11:56:20 cookie ['user=hgkllhdde8h8skdc']
11:56:20 path and query /weibo/index {} 
11:56:20 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input class='comment-content' name="content" value="">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->

        <!--</div>-->

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:56:20 完整请求
11:56:20 完整请求
11:56:20 请求结束
11:56:20 cookie ['user=hgkllhdde8h8skdc']
11:56:20 请求结束
11:56:20 path and query /static {'file': 'weibo.js'} 
11:56:20 cookie ['user=hgkllhdde8h8skdc']
11:56:20 path and query /static {'file': 'gua.js'} 
11:56:20 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:56:20 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
11:56:22 完整请求
11:56:22 请求结束
11:56:22 cookie ['user=hgkllhdde8h8skdc']
11:56:22 path and query /weibo/index {} 
11:56:22 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <!--<div class="comment-form">-->
            <!--<input type="hidden" name="weibo_id" value="">-->
            <!--<input class='comment-content' name="content" value="">-->
            <!--<br>-->
            <!--<button class="comment-add">添加评论</button>-->

        <!--</div>-->

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:56:22 完整请求
11:56:22 完整请求
11:56:22 请求结束
11:56:22 请求结束
11:56:22 cookie ['user=hgkllhdde8h8skdc']
11:56:22 path and query /static {'file': 'gua.js'} 
11:56:22 cookie ['user=hgkllhdde8h8skdc']
11:56:22 path and query /static {'file': 'weibo.js'} 
11:56:22 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
11:56:22 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:56:30 完整请求
11:56:30 请求结束
11:56:30 cookie ['user=hgkllhdde8h8skdc']
11:56:30 path and query /weibo/index {} 
11:56:30 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input class='comment-content' name="content" value="">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:56:30 完整请求
11:56:30 完整请求
11:56:30 请求结束
11:56:30 cookie ['user=hgkllhdde8h8skdc']
11:56:30 请求结束
11:56:30 path and query /static {'file': 'weibo.js'} 
11:56:30 cookie ['user=hgkllhdde8h8skdc']
11:56:30 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:56:30 path and query /static {'file': 'gua.js'} 
11:56:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
11:56:30 完整请求
11:56:30 请求结束
11:56:30 cookie ['user=hgkllhdde8h8skdc']
11:56:30 path and query /api/weibo/all {} 
11:56:30 kwargs,  {'weibo_id': 4} <class 'dict'>
11:56:30 kwargs,  {'weibo_id': 6} <class 'dict'>
11:56:30 kwargs,  {'weibo_id': 7} <class 'dict'>
11:56:30 kwargs,  {'weibo_id': 8} <class 'dict'>
11:56:30 kwargs,  {'weibo_id': 11} <class 'dict'>
11:56:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
11:56:39 完整请求
11:56:39 请求结束
11:56:39 cookie ['user=hgkllhdde8h8skdc']
11:56:39 path and query /weibo/index {} 
11:56:39 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <!--<div class="comment">-->

        <!--</div>-->
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input class='comment-content' name="content" value="">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:56:39 完整请求
11:56:39 完整请求
11:56:39 请求结束
11:56:39 请求结束
11:56:39 cookie ['user=hgkllhdde8h8skdc']
11:56:39 cookie ['user=hgkllhdde8h8skdc']
11:56:39 path and query /static {'file': 'gua.js'} 
11:56:39 path and query /static {'file': 'weibo.js'} 
11:56:39 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
11:56:39 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:56:39 完整请求
11:56:39 请求结束
11:56:39 cookie ['user=hgkllhdde8h8skdc']
11:56:39 path and query /api/weibo/all {} 
11:56:39 kwargs,  {'weibo_id': 4} <class 'dict'>
11:56:39 kwargs,  {'weibo_id': 6} <class 'dict'>
11:56:39 kwargs,  {'weibo_id': 7} <class 'dict'>
11:56:39 kwargs,  {'weibo_id': 8} <class 'dict'>
11:56:39 kwargs,  {'weibo_id': 11} <class 'dict'>
11:56:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
11:56:42 完整请求
11:56:42 请求结束
11:56:42 cookie ['user=hgkllhdde8h8skdc']
11:56:42 path and query /weibo/index {} 
11:56:42 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input class='comment-content' name="content" value="">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:56:42 完整请求
11:56:42 完整请求
11:56:42 请求结束
11:56:42 请求结束
11:56:42 cookie ['user=hgkllhdde8h8skdc']
11:56:42 cookie ['user=hgkllhdde8h8skdc']
11:56:42 path and query /static {'file': 'weibo.js'} 
11:56:42 path and query /static {'file': 'gua.js'} 
11:56:42 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
11:56:42 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:56:42 完整请求
11:56:42 请求结束
11:56:42 cookie ['user=hgkllhdde8h8skdc']
11:56:42 path and query /api/weibo/all {} 
11:56:42 kwargs,  {'weibo_id': 4} <class 'dict'>
11:56:42 kwargs,  {'weibo_id': 6} <class 'dict'>
11:56:42 kwargs,  {'weibo_id': 7} <class 'dict'>
11:56:42 kwargs,  {'weibo_id': 8} <class 'dict'>
11:56:42 kwargs,  {'weibo_id': 11} <class 'dict'>
11:56:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
11:58:33 完整请求
11:58:33 请求结束
11:58:33 cookie ['user=hgkllhdde8h8skdc']
11:58:33 path and query /weibo/index {} 
11:58:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
            
        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:58:33 完整请求
11:58:33 完整请求
11:58:33 请求结束
11:58:33 请求结束
11:58:33 cookie ['user=hgkllhdde8h8skdc']
11:58:33 cookie ['user=hgkllhdde8h8skdc']
11:58:33 path and query /static {'file': 'gua.js'} 
11:58:33 path and query /static {'file': 'weibo.js'} 
11:58:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
11:58:33 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:58:33 完整请求
11:58:33 请求结束
11:58:33 cookie ['user=hgkllhdde8h8skdc']
11:58:33 path and query /api/weibo/all {} 
11:58:33 kwargs,  {'weibo_id': 4} <class 'dict'>
11:58:33 kwargs,  {'weibo_id': 6} <class 'dict'>
11:58:33 kwargs,  {'weibo_id': 7} <class 'dict'>
11:58:33 kwargs,  {'weibo_id': 8} <class 'dict'>
11:58:33 kwargs,  {'weibo_id': 11} <class 'dict'>
11:58:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
11:58:34 完整请求
11:58:34 请求结束
11:58:34 cookie ['user=hgkllhdde8h8skdc']
11:58:34 path and query /api/comment/add {} 
11:58:34 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
11:58:35 完整请求
11:58:35 请求结束
11:58:35 cookie ['user=hgkllhdde8h8skdc']
11:58:35 path and query /api/comment/add {} 
11:58:35 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
11:58:35 完整请求
11:58:35 请求结束
11:58:35 cookie ['user=hgkllhdde8h8skdc']
11:58:35 path and query /api/comment/add {} 
11:58:35 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
11:58:35 完整请求
11:58:35 请求结束
11:58:35 cookie ['user=hgkllhdde8h8skdc']
11:58:35 path and query /api/comment/add {} 
11:58:35 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
11:58:35 完整请求
11:58:35 请求结束
11:58:35 cookie ['user=hgkllhdde8h8skdc']
11:58:35 path and query /api/comment/add {} {"content":""}
11:58:35 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:40:53 完整请求
12:40:53 请求结束
12:40:53 cookie ['user=hgkllhdde8h8skdc']
12:40:53 path and query /weibo/index {} 
12:40:53 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:40:53 完整请求
12:40:53 请求结束
12:40:53 完整请求
12:40:53 cookie ['user=hgkllhdde8h8skdc']
12:40:53 请求结束
12:40:53 cookie ['user=hgkllhdde8h8skdc']
12:40:53 path and query /static {'file': 'weibo.js'} 
12:40:53 path and query /static {'file': 'gua.js'} 
12:40:53 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div> 
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-form')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:40:53 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
12:40:53 完整请求
12:40:53 请求结束
12:40:53 cookie ['user=hgkllhdde8h8skdc']
12:40:53 path and query /api/weibo/all {} 
12:40:53 kwargs,  {'weibo_id': 4} <class 'dict'>
12:40:53 kwargs,  {'weibo_id': 6} <class 'dict'>
12:40:53 kwargs,  {'weibo_id': 7} <class 'dict'>
12:40:53 kwargs,  {'weibo_id': 8} <class 'dict'>
12:40:53 kwargs,  {'weibo_id': 11} <class 'dict'>
12:40:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
12:40:59 完整请求
12:40:59 请求结束
12:40:59 cookie ['user=hgkllhdde8h8skdc']
12:40:59 path and query /api/comment/add {} {"content":""}
12:40:59 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:23:22 完整请求
13:23:22 请求结束
13:23:22 cookie ['user=hgkllhdde8h8skdc']
13:23:22 path and query /weibo/index {} 
13:23:22 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:23:23 完整请求
13:23:23 完整请求
13:23:23 请求结束
13:23:23 请求结束
13:23:23 cookie ['user=hgkllhdde8h8skdc']
13:23:23 path and query /static {'file': 'gua.js'} 
13:23:23 cookie ['user=hgkllhdde8h8skdc']
13:23:23 path and query /static {'file': 'weibo.js'} 
13:23:23 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
13:23:23 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div> 
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:23:23 完整请求
13:23:23 请求结束
13:23:23 cookie ['user=hgkllhdde8h8skdc']
13:23:23 path and query /api/weibo/all {} 
13:23:23 kwargs,  {'weibo_id': 4} <class 'dict'>
13:23:23 kwargs,  {'weibo_id': 6} <class 'dict'>
13:23:23 kwargs,  {'weibo_id': 7} <class 'dict'>
13:23:23 kwargs,  {'weibo_id': 8} <class 'dict'>
13:23:23 kwargs,  {'weibo_id': 11} <class 'dict'>
13:23:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
13:26:10 完整请求
13:26:10 请求结束
13:26:10 cookie ['user=hgkllhdde8h8skdc']
13:26:10 path and query /weibo/index {} 
13:26:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:26:10 完整请求
13:26:10 完整请求
13:26:10 请求结束
13:26:10 请求结束
13:26:10 cookie ['user=hgkllhdde8h8skdc']
13:26:10 cookie ['user=hgkllhdde8h8skdc']
13:26:10 path and query /static {'file': 'weibo.js'} 
13:26:10 path and query /static {'file': 'gua.js'} 
13:26:10 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
13:26:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div> 
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input id='id-comment-add' name="content" value="">
                <br>
                <button id="id-comment-add-button">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('#id-comment-add-button')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-comment-add')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:26:13 完整请求
13:26:13 请求结束
13:26:13 cookie ['user=hgkllhdde8h8skdc']
13:26:13 path and query /weibo/index {} 
13:26:13 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:26:13 完整请求
13:26:13 请求结束
13:26:13 cookie ['user=hgkllhdde8h8skdc']
13:26:13 完整请求
13:26:13 请求结束
13:26:13 path and query /static {'file': 'gua.js'} 
13:26:13 cookie ['user=hgkllhdde8h8skdc']
13:26:13 path and query /static {'file': 'weibo.js'} 
13:26:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
13:26:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div> 
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input id='id-comment-add' name="content" value="">
                <br>
                <button id="id-comment-add-button">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('#id-comment-add-button')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-comment-add')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:27:12 完整请求
13:27:12 请求结束
13:27:12 cookie ['user=hgkllhdde8h8skdc']
13:27:12 path and query /weibo/index {} 
13:27:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:27:12 完整请求
13:27:12 请求结束
13:27:12 完整请求
13:27:12 cookie ['user=hgkllhdde8h8skdc']
13:27:12 请求结束
13:27:12 path and query /static {'file': 'gua.js'} 
13:27:12 cookie ['user=hgkllhdde8h8skdc']
13:27:12 path and query /static {'file': 'weibo.js'} 
13:27:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
13:27:12 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div> 
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input id='id-comment-add' name="content" value="">
                <br>
                <button id="id-comment-add-button">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.weibo-cell')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-comment-add')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:27:15 完整请求
13:27:15 请求结束
13:27:15 cookie ['user=hgkllhdde8h8skdc']
13:27:15 path and query /weibo/index {} 
13:27:15 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:27:15 完整请求
13:27:15 完整请求
13:27:15 请求结束
13:27:15 请求结束
13:27:15 cookie ['user=hgkllhdde8h8skdc']
13:27:15 cookie ['user=hgkllhdde8h8skdc']
13:27:15 path and query /static {'file': 'gua.js'} 
13:27:15 path and query /static {'file': 'weibo.js'} 
13:27:15 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
13:27:15 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div> 
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input id='id-comment-add' name="content" value="">
                <br>
                <button id="id-comment-add-button">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.weibo-cell')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-comment-add')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:27:58 完整请求
13:27:58 请求结束
13:27:58 cookie ['user=hgkllhdde8h8skdc']
13:27:58 path and query /weibo/index {} 
13:27:58 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:27:58 完整请求
13:27:58 完整请求
13:27:58 请求结束
13:27:58 请求结束
13:27:58 cookie ['user=hgkllhdde8h8skdc']
13:27:58 cookie ['user=hgkllhdde8h8skdc']
13:27:58 path and query /static {'file': 'gua.js'} 
13:27:58 path and query /static {'file': 'weibo.js'} 
13:27:58 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
13:27:58 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div> 
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:27:58 完整请求
13:27:58 请求结束
13:27:58 cookie ['user=hgkllhdde8h8skdc']
13:27:58 path and query /api/weibo/all {} 
13:27:58 kwargs,  {'weibo_id': 4} <class 'dict'>
13:27:58 kwargs,  {'weibo_id': 6} <class 'dict'>
13:27:58 kwargs,  {'weibo_id': 7} <class 'dict'>
13:27:58 kwargs,  {'weibo_id': 8} <class 'dict'>
13:27:58 kwargs,  {'weibo_id': 11} <class 'dict'>
13:27:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
13:37:26 完整请求
13:37:26 请求结束
13:37:26 cookie ['user=hgkllhdde8h8skdc']
13:37:26 path and query /weibo/index {} 
13:37:26 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:37:26 完整请求
13:37:26 请求结束
13:37:26 cookie ['user=hgkllhdde8h8skdc']
13:37:26 完整请求
13:37:26 请求结束
13:37:26 path and query /static {'file': 'weibo.js'} 
13:37:26 cookie ['user=hgkllhdde8h8skdc']
13:37:26 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div> 
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:37:26 path and query /static {'file': 'gua.js'} 
13:37:26 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
13:37:26 完整请求
13:37:26 请求结束
13:37:26 cookie ['user=hgkllhdde8h8skdc']
13:37:26 path and query /api/weibo/all {} 
13:37:26 kwargs,  {'weibo_id': 4} <class 'dict'>
13:37:26 kwargs,  {'weibo_id': 6} <class 'dict'>
13:37:26 kwargs,  {'weibo_id': 7} <class 'dict'>
13:37:26 kwargs,  {'weibo_id': 8} <class 'dict'>
13:37:27 kwargs,  {'weibo_id': 11} <class 'dict'>
13:37:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
13:37:31 完整请求
13:37:31 请求结束
13:37:31 cookie ['user=hgkllhdde8h8skdc']
13:37:31 path and query /weibo/index {} 
13:37:31 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:37:31 完整请求
13:37:31 请求结束
13:37:31 cookie ['user=hgkllhdde8h8skdc']
13:37:31 完整请求
13:37:31 path and query /static {'file': 'gua.js'} 
13:37:31 请求结束
13:37:31 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
13:37:31 cookie ['user=hgkllhdde8h8skdc']
13:37:31 path and query /static {'file': 'weibo.js'} 
13:37:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div> 
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:37:31 完整请求
13:37:31 请求结束
13:37:31 cookie ['user=hgkllhdde8h8skdc']
13:37:31 path and query /api/weibo/all {} 
13:37:31 kwargs,  {'weibo_id': 4} <class 'dict'>
13:37:31 kwargs,  {'weibo_id': 6} <class 'dict'>
13:37:31 kwargs,  {'weibo_id': 7} <class 'dict'>
13:37:31 kwargs,  {'weibo_id': 8} <class 'dict'>
13:37:31 kwargs,  {'weibo_id': 11} <class 'dict'>
13:37:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
13:37:33 完整请求
13:37:33 请求结束
13:37:33 cookie ['user=hgkllhdde8h8skdc']
13:37:33 path and query /api/comment/add {} 
13:37:33 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:38:06 完整请求
13:38:06 请求结束
13:38:06 cookie ['user=hgkllhdde8h8skdc']
13:38:06 path and query /weibo/index {} 
13:38:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:38:06 完整请求
13:38:06 完整请求
13:38:06 请求结束
13:38:06 请求结束
13:38:06 cookie ['user=hgkllhdde8h8skdc']
13:38:06 cookie ['user=hgkllhdde8h8skdc']
13:38:06 path and query /static {'file': 'gua.js'} 
13:38:06 path and query /static {'file': 'weibo.js'} 
13:38:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
13:38:06 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div> 
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.weibo-cel.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:38:10 完整请求
13:38:10 请求结束
13:38:10 cookie ['user=hgkllhdde8h8skdc']
13:38:10 path and query /weibo/index {} 
13:38:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:38:10 完整请求
13:38:10 请求结束
13:38:10 cookie ['user=hgkllhdde8h8skdc']
13:38:10 完整请求
13:38:10 请求结束
13:38:10 path and query /static {'file': 'gua.js'} 
13:38:10 cookie ['user=hgkllhdde8h8skdc']
13:38:10 path and query /static {'file': 'weibo.js'} 
13:38:10 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
13:38:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div> 
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.weibo-cel .comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:38:21 完整请求
13:38:21 请求结束
13:38:21 cookie ['user=hgkllhdde8h8skdc']
13:38:21 path and query /weibo/index {} 
13:38:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list-gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>

        </div>

    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:38:21 完整请求
13:38:21 完整请求
13:38:21 请求结束
13:38:21 请求结束
13:38:21 cookie ['user=hgkllhdde8h8skdc']
13:38:21 cookie ['user=hgkllhdde8h8skdc']
13:38:21 path and query /static {'file': 'weibo.js'} 
13:38:21 path and query /static {'file': 'gua.js'} 
13:38:21 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    // log('weibo.ut', weibo.ut)
    var ut = timeString(weibo.ut)
    // log('ut', ut)
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' id='weibo-${id}' data-id=${id}>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
            <button class="weibo-edit">编辑微博</button>
            <button class="weibo-delete">删除微博</button>
            <div class="comment-list">
                ${comments}
            </div> 
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input class='comment-content' name="content" value="">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

    var insertWeibo = function(weibo) {
    // log('weibo成功获取到？', weibo)
    var WeiboCell = WeiboTemplate(weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list-gua-auto-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input" name='' value="{{  }}">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        // log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加weibo成功')
            var weibo = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertWeibo(weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        // log('click 删除按钮', self)
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除weibo成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            log('weibo-edit',self)
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list-gua-auto-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ', self)
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            // log('WeiboCell', WeiboCell)
            var Weibo_id = WeiboCell.dataset.id
            // log('Weibo_id', Weibo_id)
            // log('content', content)
            var form = {
                'id': Weibo_id,
                'content': content,
            }
            log('form', form)
            apiWeiboUpdate(form, function(r){
                // log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                log('selector', selector)
                var WeiboCell = e(selector)
                log('WeiboCell', WeiboCell)
                var contentSpan = WeiboCell.querySelector('.weibo-content')
                log('contentSpan', contentSpan)
                contentSpan.innerHTML = form['content']
                log('contentSpan', contentSpan)
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentsAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('.comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        // log('form表单', form)
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            log('添加comment成功')
            var comment = JSON.parse(r)
            // log('var weibo = JSON.parse(r) 这一步结果？', weibo)
            insertComment(comment)
        })
    })
}

var bindEvents = function() {
   bindEventWeiboAdd()
   bindEventWeiboDelete()
   bindEventWeiboEdit()
   bindEventWeiboUpdate()
   bindEventCommentsAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:38:21 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    //添加 todo 的路由 path 是 /api/todo/add 对应的路由函数是 add
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}
13:38:21 完整请求
13:38:21 请求结束
13:38:21 cookie ['user=hgkllhdde8h8skdc']
13:38:21 path and query /api/weibo/all {} 
13:38:21 kwargs,  {'weibo_id': 4} <class 'dict'>
13:38:21 kwargs,  {'weibo_id': 6} <class 'dict'>
13:38:21 kwargs,  {'weibo_id': 7} <class 'dict'>
13:38:21 kwargs,  {'weibo_id': 8} <class 'dict'>
13:38:21 kwargs,  {'weibo_id': 11} <class 'dict'>
13:38:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "content": "q",
    "ct": 1512963400,
    "ut": 1512963400,
    "comments": []
  },
  {
    "id": 6,
    "content": "qffv",
    "ct": 1512963404,
    "ut": 1512963404,
    "comments": []
  },
  {
    "id": 7,
    "content": "qffvdd",
    "ct": 1512963406,
    "ut": 1512963406,
    "comments": []
  },
  {
    "id": 8,
    "content": "233qffvdd",
    "ct": 1512963409,
    "ut": 1512963409,
    "comments": []
  },
  {
    "id": 11,
    "content": "",
    "ct": 1512963859,
    "ut": 1512963859,
    "comments": []
  }
]
13:38:29 完整请求
13:38:29 请求结束
13:38:29 cookie ['user=hgkllhdde8h8skdc']
13:38:29 path and query /api/comment/add {} {"content":""}
13:38:29 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
